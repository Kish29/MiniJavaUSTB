/*
 * generated by Xtext 2.25.0
 */
package edu.ustb.cmp.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class MiniJavaGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class MiniJavaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.ustb.cmp.MiniJava.MiniJava");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPackageAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cPackagePackageDeclParserRuleCall_0_0 = (RuleCall)cPackageAssignment_0.eContents().get(0);
		private final Assignment cImportsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportsImportDeclParserRuleCall_1_0 = (RuleCall)cImportsAssignment_1.eContents().get(0);
		private final Assignment cMainclassAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cMainclassMainClassDeclParserRuleCall_2_0 = (RuleCall)cMainclassAssignment_2.eContents().get(0);
		private final Assignment cClassesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cClassesClassDeclParserRuleCall_3_0 = (RuleCall)cClassesAssignment_3.eContents().get(0);
		
		//// 整个MiniJava文件的结构体定义，.mj文件
		///* package:类包定位 : PackageDef
		// * import*:导包内容
		// * MianClass:只执行主方法
		// * class: 其他class类定义
		// * */
		//// mj文件结构定义，从上到下依次为:
		//// package描述
		//// imports 描述
		//// 主类固定声明
		//// 其他类声明
		//MiniJava :
		//    package = PackageDecl
		//    imports += ImportDecl*
		//    mainclass = MainClassDecl
		//    classes += ClassDecl*;
		@Override public ParserRule getRule() { return rule; }
		
		//package = PackageDecl
		//imports += ImportDecl*
		//mainclass = MainClassDecl
		//classes += ClassDecl*
		public Group getGroup() { return cGroup; }
		
		//package = PackageDecl
		public Assignment getPackageAssignment_0() { return cPackageAssignment_0; }
		
		//PackageDecl
		public RuleCall getPackagePackageDeclParserRuleCall_0_0() { return cPackagePackageDeclParserRuleCall_0_0; }
		
		//imports += ImportDecl*
		public Assignment getImportsAssignment_1() { return cImportsAssignment_1; }
		
		//ImportDecl
		public RuleCall getImportsImportDeclParserRuleCall_1_0() { return cImportsImportDeclParserRuleCall_1_0; }
		
		//mainclass = MainClassDecl
		public Assignment getMainclassAssignment_2() { return cMainclassAssignment_2; }
		
		//MainClassDecl
		public RuleCall getMainclassMainClassDeclParserRuleCall_2_0() { return cMainclassMainClassDeclParserRuleCall_2_0; }
		
		//classes += ClassDecl*
		public Assignment getClassesAssignment_3() { return cClassesAssignment_3; }
		
		//ClassDecl
		public RuleCall getClassesClassDeclParserRuleCall_3_0() { return cClassesClassDeclParserRuleCall_3_0; }
	}
	public class PackageDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.ustb.cmp.MiniJava.PackageDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPackageKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameQualifiedNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//// 基本全局定义
		//// 包
		//PackageDecl:
		//    'package' name = QualifiedName ';'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'package' name = QualifiedName ';'
		public Group getGroup() { return cGroup; }
		
		//'package'
		public Keyword getPackageKeyword_0() { return cPackageKeyword_0; }
		
		//name = QualifiedName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_1_0() { return cNameQualifiedNameParserRuleCall_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}
	public class ImportDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.ustb.cmp.MiniJava.ImportDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cAnchorAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAnchorQualifiedNameParserRuleCall_1_0 = (RuleCall)cAnchorAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//// 导包
		//ImportDecl:
		//    'import' anchor = QualifiedName ';'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'import' anchor = QualifiedName ';'
		public Group getGroup() { return cGroup; }
		
		//'import'
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }
		
		//anchor = QualifiedName
		public Assignment getAnchorAssignment_1() { return cAnchorAssignment_1; }
		
		//QualifiedName
		public RuleCall getAnchorQualifiedNameParserRuleCall_1_0() { return cAnchorQualifiedNameParserRuleCall_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}
	public class MainClassDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.ustb.cmp.MiniJava.MainClassDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cMainClassDeclAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cClassKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cPublicKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cStaticKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cVoidKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cMainKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Keyword cLeftParenthesisKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Keyword cStringKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Keyword cLeftSquareBracketKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Keyword cRightSquareBracketKeyword_11 = (Keyword)cGroup.eContents().get(11);
		private final Assignment cNameAssignment_12 = (Assignment)cGroup.eContents().get(12);
		private final RuleCall cNameIDTerminalRuleCall_12_0 = (RuleCall)cNameAssignment_12.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_13 = (Keyword)cGroup.eContents().get(13);
		private final Keyword cLeftCurlyBracketKeyword_14 = (Keyword)cGroup.eContents().get(14);
		private final Assignment cStatementsAssignment_15 = (Assignment)cGroup.eContents().get(15);
		private final RuleCall cStatementsStatementParserRuleCall_15_0 = (RuleCall)cStatementsAssignment_15.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_16 = (Keyword)cGroup.eContents().get(16);
		private final Keyword cRightCurlyBracketKeyword_17 = (Keyword)cGroup.eContents().get(17);
		
		//// 主类定义，执行主方法
		//MainClassDecl:
		//    {MainClassDecl} "class" ID "{"
		//        "public" "static" "void" "main" "(" "String" "[" "]" name=ID ")" "{"
		//            statements += Statement*
		//        "}"
		//    "}"
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{MainClassDecl} "class" ID "{"
		//    "public" "static" "void" "main" "(" "String" "[" "]" name=ID ")" "{"
		//        statements += Statement*
		//    "}"
		//"}"
		public Group getGroup() { return cGroup; }
		
		//{MainClassDecl}
		public Action getMainClassDeclAction_0() { return cMainClassDeclAction_0; }
		
		//"class"
		public Keyword getClassKeyword_1() { return cClassKeyword_1; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_2() { return cIDTerminalRuleCall_2; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//"public"
		public Keyword getPublicKeyword_4() { return cPublicKeyword_4; }
		
		//"static"
		public Keyword getStaticKeyword_5() { return cStaticKeyword_5; }
		
		//"void"
		public Keyword getVoidKeyword_6() { return cVoidKeyword_6; }
		
		//"main"
		public Keyword getMainKeyword_7() { return cMainKeyword_7; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_8() { return cLeftParenthesisKeyword_8; }
		
		//"String"
		public Keyword getStringKeyword_9() { return cStringKeyword_9; }
		
		//"["
		public Keyword getLeftSquareBracketKeyword_10() { return cLeftSquareBracketKeyword_10; }
		
		//"]"
		public Keyword getRightSquareBracketKeyword_11() { return cRightSquareBracketKeyword_11; }
		
		//name=ID
		public Assignment getNameAssignment_12() { return cNameAssignment_12; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_12_0() { return cNameIDTerminalRuleCall_12_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_13() { return cRightParenthesisKeyword_13; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_14() { return cLeftCurlyBracketKeyword_14; }
		
		//statements += Statement*
		public Assignment getStatementsAssignment_15() { return cStatementsAssignment_15; }
		
		//Statement
		public RuleCall getStatementsStatementParserRuleCall_15_0() { return cStatementsStatementParserRuleCall_15_0; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_16() { return cRightCurlyBracketKeyword_16; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_17() { return cRightCurlyBracketKeyword_17; }
	}
	public class ClassDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.ustb.cmp.MiniJava.ClassDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cClassKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cExtendsKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cSuperClassAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cSuperClassClassDeclCrossReference_2_1_0 = (CrossReference)cSuperClassAssignment_2_1.eContents().get(0);
		private final RuleCall cSuperClassClassDeclQualifiedNameParserRuleCall_2_1_0_1 = (RuleCall)cSuperClassClassDeclCrossReference_2_1_0.eContents().get(1);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cImplementsKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cImplementzAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final CrossReference cImplementzClassDeclCrossReference_3_1_0 = (CrossReference)cImplementzAssignment_3_1.eContents().get(0);
		private final RuleCall cImplementzClassDeclQualifiedNameParserRuleCall_3_1_0_1 = (RuleCall)cImplementzClassDeclCrossReference_3_1_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cMembersAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cMembersMemberParserRuleCall_5_0 = (RuleCall)cMembersAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//// 其他类定义
		//ClassDecl:
		//    "class" name = ID ("extends" superClass=[ClassDecl | QualifiedName])? ("implements" implementz += [ClassDecl | QualifiedName] )? "{"
		//        members += Member*
		//    "}"
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"class" name = ID ("extends" superClass=[ClassDecl | QualifiedName])? ("implements" implementz += [ClassDecl | QualifiedName] )? "{"
		//    members += Member*
		//"}"
		public Group getGroup() { return cGroup; }
		
		//"class"
		public Keyword getClassKeyword_0() { return cClassKeyword_0; }
		
		//name = ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//("extends" superClass=[ClassDecl | QualifiedName])?
		public Group getGroup_2() { return cGroup_2; }
		
		//"extends"
		public Keyword getExtendsKeyword_2_0() { return cExtendsKeyword_2_0; }
		
		//superClass=[ClassDecl | QualifiedName]
		public Assignment getSuperClassAssignment_2_1() { return cSuperClassAssignment_2_1; }
		
		//[ClassDecl | QualifiedName]
		public CrossReference getSuperClassClassDeclCrossReference_2_1_0() { return cSuperClassClassDeclCrossReference_2_1_0; }
		
		//QualifiedName
		public RuleCall getSuperClassClassDeclQualifiedNameParserRuleCall_2_1_0_1() { return cSuperClassClassDeclQualifiedNameParserRuleCall_2_1_0_1; }
		
		//("implements" implementz += [ClassDecl | QualifiedName] )?
		public Group getGroup_3() { return cGroup_3; }
		
		//"implements"
		public Keyword getImplementsKeyword_3_0() { return cImplementsKeyword_3_0; }
		
		//implementz += [ClassDecl | QualifiedName]
		public Assignment getImplementzAssignment_3_1() { return cImplementzAssignment_3_1; }
		
		//[ClassDecl | QualifiedName]
		public CrossReference getImplementzClassDeclCrossReference_3_1_0() { return cImplementzClassDeclCrossReference_3_1_0; }
		
		//QualifiedName
		public RuleCall getImplementzClassDeclQualifiedNameParserRuleCall_3_1_0_1() { return cImplementzClassDeclQualifiedNameParserRuleCall_3_1_0_1; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }
		
		//members += Member*
		public Assignment getMembersAssignment_5() { return cMembersAssignment_5; }
		
		//Member
		public RuleCall getMembersMemberParserRuleCall_5_0() { return cMembersMemberParserRuleCall_5_0; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.ustb.cmp.MiniJava.QualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//// 合法名称定义
		//QualifiedName:
		//    ID ('.' ID)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//ID ('.' ID)*
		public Group getGroup() { return cGroup; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//('.' ID)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}
	public class DoubleLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.ustb.cmp.MiniJava.DoubleLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//// 浮点数表示方法
		//DoubleLiteral:
		//    INT'.'INT
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//INT'.'INT
		public Group getGroup() { return cGroup; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_0() { return cINTTerminalRuleCall_0; }
		
		//'.'
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_2() { return cINTTerminalRuleCall_2; }
	}
	public class ConstantValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.ustb.cmp.MiniJava.ConstantValue");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cDoubleLiteralParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//// 常量定义
		//ConstantValue:
		//    STRING | INT | DoubleLiteral
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//STRING | INT | DoubleLiteral
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
		
		//DoubleLiteral
		public RuleCall getDoubleLiteralParserRuleCall_2() { return cDoubleLiteralParserRuleCall_2; }
	}
	public class BasicDataTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.ustb.cmp.MiniJava.BasicDataType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cIntKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cBooleanKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cDoubleKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cCharKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cLongKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		
		//// 4个基本数据类型
		//BasicDataType:
		//    "int" | "boolean" | "double" | "char" | "long"
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"int" | "boolean" | "double" | "char" | "long"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//"int"
		public Keyword getIntKeyword_0() { return cIntKeyword_0; }
		
		//"boolean"
		public Keyword getBooleanKeyword_1() { return cBooleanKeyword_1; }
		
		//"double"
		public Keyword getDoubleKeyword_2() { return cDoubleKeyword_2; }
		
		//"char"
		public Keyword getCharKeyword_3() { return cCharKeyword_3; }
		
		//"long"
		public Keyword getLongKeyword_4() { return cLongKeyword_4; }
	}
	public class DataTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.ustb.cmp.MiniJava.DataType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBasicDataTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cQualifiedNameParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final RuleCall cBasicDataTypeParserRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		
		//// DataType：普通变量或数组
		//DataType:
		//     BasicDataType | QualifiedName | BasicDataType "[" "]"
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//BasicDataType | QualifiedName | BasicDataType "[" "]"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//BasicDataType
		public RuleCall getBasicDataTypeParserRuleCall_0() { return cBasicDataTypeParserRuleCall_0; }
		
		//QualifiedName
		public RuleCall getQualifiedNameParserRuleCall_1() { return cQualifiedNameParserRuleCall_1; }
		
		//BasicDataType "[" "]"
		public Group getGroup_2() { return cGroup_2; }
		
		//BasicDataType
		public RuleCall getBasicDataTypeParserRuleCall_2_0() { return cBasicDataTypeParserRuleCall_2_0; }
		
		//"["
		public Keyword getLeftSquareBracketKeyword_2_1() { return cLeftSquareBracketKeyword_2_1; }
		
		//"]"
		public Keyword getRightSquareBracketKeyword_2_2() { return cRightSquareBracketKeyword_2_2; }
	}
	public class VariableDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.ustb.cmp.MiniJava.VariableDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVarTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cVarTypeDataTypeParserRuleCall_0_0 = (RuleCall)cVarTypeAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValueConstantValueParserRuleCall_3_0 = (RuleCall)cValueAssignment_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//// 变量定义
		//// eg: int a;
		//VariableDecl:
		//    varType = DataType name = ID ("=")? value=ConstantValue? ";"
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//varType = DataType name = ID ("=")? value=ConstantValue? ";"
		public Group getGroup() { return cGroup; }
		
		//varType = DataType
		public Assignment getVarTypeAssignment_0() { return cVarTypeAssignment_0; }
		
		//DataType
		public RuleCall getVarTypeDataTypeParserRuleCall_0_0() { return cVarTypeDataTypeParserRuleCall_0_0; }
		
		//name = ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//("=")?
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }
		
		//value=ConstantValue?
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }
		
		//ConstantValue
		public RuleCall getValueConstantValueParserRuleCall_3_0() { return cValueConstantValueParserRuleCall_3_0; }
		
		//";"
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}
	public class ReturnTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.ustb.cmp.MiniJava.ReturnType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDataTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Keyword cVoidKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//// 返回类型
		//ReturnType:
		//    DataType | "void"
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//DataType | "void"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//DataType
		public RuleCall getDataTypeParserRuleCall_0() { return cDataTypeParserRuleCall_0; }
		
		//"void"
		public Keyword getVoidKeyword_1() { return cVoidKeyword_1; }
	}
	public class ParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.ustb.cmp.MiniJava.Parameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeDataTypeParserRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cCommaKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//// 参数类型
		//Parameter:
		//    type=DataType name=ID ","?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//type=DataType name=ID ","?
		public Group getGroup() { return cGroup; }
		
		//type=DataType
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }
		
		//DataType
		public RuleCall getTypeDataTypeParserRuleCall_0_0() { return cTypeDataTypeParserRuleCall_0_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//","?
		public Keyword getCommaKeyword_2() { return cCommaKeyword_2; }
	}
	public class MethodDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.ustb.cmp.MiniJava.MethodDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDomainAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDomainDomainEnumRuleCall_0_0 = (RuleCall)cDomainAssignment_0.eContents().get(0);
		private final Assignment cExtraAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExtraExtraAttrEnumRuleCall_1_0 = (RuleCall)cExtraAssignment_1.eContents().get(0);
		private final Assignment cRetTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRetTypeReturnTypeParserRuleCall_2_0 = (RuleCall)cRetTypeAssignment_2.eContents().get(0);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cParamsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cParamsParameterParserRuleCall_5_0 = (RuleCall)cParamsAssignment_5.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cLeftCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cStatementsAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cStatementsStatementParserRuleCall_8_0 = (RuleCall)cStatementsAssignment_8.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//// 方法体定义
		//// eg: public void max(int a, int b) {
		////         ...
		//// }
		//MethodDecl:
		//    domain = Domain extra=(ExtraAttr)? retType=ReturnType name=ID "("(params += Parameter)*")" "{"
		//        statements += Statement*
		//    "}"
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//domain = Domain extra=(ExtraAttr)? retType=ReturnType name=ID "("(params += Parameter)*")" "{"
		//    statements += Statement*
		//"}"
		public Group getGroup() { return cGroup; }
		
		//domain = Domain
		public Assignment getDomainAssignment_0() { return cDomainAssignment_0; }
		
		//Domain
		public RuleCall getDomainDomainEnumRuleCall_0_0() { return cDomainDomainEnumRuleCall_0_0; }
		
		//extra=(ExtraAttr)?
		public Assignment getExtraAssignment_1() { return cExtraAssignment_1; }
		
		//(ExtraAttr)
		public RuleCall getExtraExtraAttrEnumRuleCall_1_0() { return cExtraExtraAttrEnumRuleCall_1_0; }
		
		//retType=ReturnType
		public Assignment getRetTypeAssignment_2() { return cRetTypeAssignment_2; }
		
		//ReturnType
		public RuleCall getRetTypeReturnTypeParserRuleCall_2_0() { return cRetTypeReturnTypeParserRuleCall_2_0; }
		
		//name=ID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0() { return cNameIDTerminalRuleCall_3_0; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_4() { return cLeftParenthesisKeyword_4; }
		
		//(params += Parameter)*
		public Assignment getParamsAssignment_5() { return cParamsAssignment_5; }
		
		//Parameter
		public RuleCall getParamsParameterParserRuleCall_5_0() { return cParamsParameterParserRuleCall_5_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_7() { return cLeftCurlyBracketKeyword_7; }
		
		//statements += Statement*
		public Assignment getStatementsAssignment_8() { return cStatementsAssignment_8; }
		
		//Statement
		public RuleCall getStatementsStatementParserRuleCall_8_0() { return cStatementsStatementParserRuleCall_8_0; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_9() { return cRightCurlyBracketKeyword_9; }
	}
	public class MemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.ustb.cmp.MiniJava.Member");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cVariableDeclParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cMethodDeclParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//// 类成员定义: 变量和方法体
		//Member:
		//    VariableDecl | MethodDecl
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//VariableDecl | MethodDecl
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//VariableDecl
		public RuleCall getVariableDeclParserRuleCall_0() { return cVariableDeclParserRuleCall_0; }
		
		//MethodDecl
		public RuleCall getMethodDeclParserRuleCall_1() { return cMethodDeclParserRuleCall_1; }
	}
	public class StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.ustb.cmp.MiniJava.Statement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cVarDefAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cVarDefVariableDeclParserRuleCall_0_0 = (RuleCall)cVarDefAssignment_0.eContents().get(0);
		private final Assignment cAssignAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cAssignAssignmentsParserRuleCall_1_0 = (RuleCall)cAssignAssignment_1.eContents().get(0);
		private final Assignment cIfStatAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cIfStatIfStatementsParserRuleCall_2_0 = (RuleCall)cIfStatAssignment_2.eContents().get(0);
		private final Assignment cWhileStatAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cWhileStatWhileStatementsParserRuleCall_3_0 = (RuleCall)cWhileStatAssignment_3.eContents().get(0);
		private final Assignment cRetStatAssignment_4 = (Assignment)cAlternatives.eContents().get(4);
		private final RuleCall cRetStatReturnStatementsParserRuleCall_4_0 = (RuleCall)cRetStatAssignment_4.eContents().get(0);
		
		//// 代码陈述语句
		///* return
		// * int a
		// * a = 0
		// * a = a * 2
		// * if (a = 0)
		// * while ()
		// * for
		// * */
		//Statement:
		//     varDef=VariableDecl |assign=Assignments | ifStat=IfStatements | whileStat=WhileStatements | retStat=ReturnStatements
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//varDef=VariableDecl |assign=Assignments | ifStat=IfStatements | whileStat=WhileStatements | retStat=ReturnStatements
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//varDef=VariableDecl
		public Assignment getVarDefAssignment_0() { return cVarDefAssignment_0; }
		
		//VariableDecl
		public RuleCall getVarDefVariableDeclParserRuleCall_0_0() { return cVarDefVariableDeclParserRuleCall_0_0; }
		
		//assign=Assignments
		public Assignment getAssignAssignment_1() { return cAssignAssignment_1; }
		
		//Assignments
		public RuleCall getAssignAssignmentsParserRuleCall_1_0() { return cAssignAssignmentsParserRuleCall_1_0; }
		
		//ifStat=IfStatements
		public Assignment getIfStatAssignment_2() { return cIfStatAssignment_2; }
		
		//IfStatements
		public RuleCall getIfStatIfStatementsParserRuleCall_2_0() { return cIfStatIfStatementsParserRuleCall_2_0; }
		
		//whileStat=WhileStatements
		public Assignment getWhileStatAssignment_3() { return cWhileStatAssignment_3; }
		
		//WhileStatements
		public RuleCall getWhileStatWhileStatementsParserRuleCall_3_0() { return cWhileStatWhileStatementsParserRuleCall_3_0; }
		
		//retStat=ReturnStatements
		public Assignment getRetStatAssignment_4() { return cRetStatAssignment_4; }
		
		//ReturnStatements
		public RuleCall getRetStatReturnStatementsParserRuleCall_4_0() { return cRetStatReturnStatementsParserRuleCall_4_0; }
	}
	public class LValueExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.ustb.cmp.MiniJava.LValueExp");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cIdAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cIdIDTerminalRuleCall_0_0 = (RuleCall)cIdAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cExpAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cExpExpressionParserRuleCall_1_0_0 = (RuleCall)cExpAssignment_1_0.eContents().get(0);
		private final Keyword cFullStopKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cIdAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cIdQualifiedNameParserRuleCall_1_2_0 = (RuleCall)cIdAssignment_1_2.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Assignment cExpAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cExpExpressionParserRuleCall_2_0_0 = (RuleCall)cExpAssignment_2_0.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cIndexAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cIndexExpressionParserRuleCall_2_2_0 = (RuleCall)cIndexAssignment_2_2.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		
		//// 左值表达式
		//LValueExp:
		//    id=ID | exp=Expression "." id=QualifiedName| exp=Expression"["index = Expression"]"
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//id=ID | exp=Expression "." id=QualifiedName| exp=Expression"["index = Expression"]"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//id=ID
		public Assignment getIdAssignment_0() { return cIdAssignment_0; }
		
		//ID
		public RuleCall getIdIDTerminalRuleCall_0_0() { return cIdIDTerminalRuleCall_0_0; }
		
		//exp=Expression "." id=QualifiedName
		public Group getGroup_1() { return cGroup_1; }
		
		//exp=Expression
		public Assignment getExpAssignment_1_0() { return cExpAssignment_1_0; }
		
		//Expression
		public RuleCall getExpExpressionParserRuleCall_1_0_0() { return cExpExpressionParserRuleCall_1_0_0; }
		
		//"."
		public Keyword getFullStopKeyword_1_1() { return cFullStopKeyword_1_1; }
		
		//id=QualifiedName
		public Assignment getIdAssignment_1_2() { return cIdAssignment_1_2; }
		
		//QualifiedName
		public RuleCall getIdQualifiedNameParserRuleCall_1_2_0() { return cIdQualifiedNameParserRuleCall_1_2_0; }
		
		//exp=Expression"["index = Expression"]"
		public Group getGroup_2() { return cGroup_2; }
		
		//exp=Expression
		public Assignment getExpAssignment_2_0() { return cExpAssignment_2_0; }
		
		//Expression
		public RuleCall getExpExpressionParserRuleCall_2_0_0() { return cExpExpressionParserRuleCall_2_0_0; }
		
		//"["
		public Keyword getLeftSquareBracketKeyword_2_1() { return cLeftSquareBracketKeyword_2_1; }
		
		//index = Expression
		public Assignment getIndexAssignment_2_2() { return cIndexAssignment_2_2; }
		
		//Expression
		public RuleCall getIndexExpressionParserRuleCall_2_2_0() { return cIndexExpressionParserRuleCall_2_2_0; }
		
		//"]"
		public Keyword getRightSquareBracketKeyword_2_3() { return cRightSquareBracketKeyword_2_3; }
	}
	public class AssignmentsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.ustb.cmp.MiniJava.Assignments");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLeftValueAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLeftValueLValueExpParserRuleCall_0_0 = (RuleCall)cLeftValueAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionExpressionParserRuleCall_2_0 = (RuleCall)cExpressionAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//// 赋值语句
		//Assignments:
		//    leftValue=LValueExp "=" expression=Expression ";"
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//leftValue=LValueExp "=" expression=Expression ";"
		public Group getGroup() { return cGroup; }
		
		//leftValue=LValueExp
		public Assignment getLeftValueAssignment_0() { return cLeftValueAssignment_0; }
		
		//LValueExp
		public RuleCall getLeftValueLValueExpParserRuleCall_0_0() { return cLeftValueLValueExpParserRuleCall_0_0; }
		
		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//expression=Expression
		public Assignment getExpressionAssignment_2() { return cExpressionAssignment_2; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_2_0() { return cExpressionExpressionParserRuleCall_2_0; }
		
		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class IfStatementsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.ustb.cmp.MiniJava.IfStatements");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cExpressionParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cStatementsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cStatementsStatementParserRuleCall_5_0 = (RuleCall)cStatementsAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cElseIfAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cElseIfElseIfStatementsParserRuleCall_7_0 = (RuleCall)cElseIfAssignment_7.eContents().get(0);
		private final Assignment cElseAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cElseElseStatementParserRuleCall_8_0 = (RuleCall)cElseAssignment_8.eContents().get(0);
		
		//// 判断语句
		//IfStatements:
		//    "if" "("Expression")" "{"
		//        statements += Statement*
		//    "}" elseIf += ElseIfStatements*
		//    else += ElseStatement*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"if" "("Expression")" "{"
		//    statements += Statement*
		//"}" elseIf += ElseIfStatements*
		//else += ElseStatement*
		public Group getGroup() { return cGroup; }
		
		//"if"
		public Keyword getIfKeyword_0() { return cIfKeyword_0; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//Expression
		public RuleCall getExpressionParserRuleCall_2() { return cExpressionParserRuleCall_2; }
		
		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }
		
		//statements += Statement*
		public Assignment getStatementsAssignment_5() { return cStatementsAssignment_5; }
		
		//Statement
		public RuleCall getStatementsStatementParserRuleCall_5_0() { return cStatementsStatementParserRuleCall_5_0; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
		
		//elseIf += ElseIfStatements*
		public Assignment getElseIfAssignment_7() { return cElseIfAssignment_7; }
		
		//ElseIfStatements
		public RuleCall getElseIfElseIfStatementsParserRuleCall_7_0() { return cElseIfElseIfStatementsParserRuleCall_7_0; }
		
		//else += ElseStatement*
		public Assignment getElseAssignment_8() { return cElseAssignment_8; }
		
		//ElseStatement
		public RuleCall getElseElseStatementParserRuleCall_8_0() { return cElseElseStatementParserRuleCall_8_0; }
	}
	public class ElseIfStatementsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.ustb.cmp.MiniJava.ElseIfStatements");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cElseKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cIfKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final RuleCall cExpressionParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cLeftCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cStatementsAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cStatementsStatementParserRuleCall_6_0 = (RuleCall)cStatementsAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//// else if () {}
		//ElseIfStatements:
		//    "else" "if" "("Expression")" "{"
		//        statements += Statement*
		//    "}"
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"else" "if" "("Expression")" "{"
		//    statements += Statement*
		//"}"
		public Group getGroup() { return cGroup; }
		
		//"else"
		public Keyword getElseKeyword_0() { return cElseKeyword_0; }
		
		//"if"
		public Keyword getIfKeyword_1() { return cIfKeyword_1; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//Expression
		public RuleCall getExpressionParserRuleCall_3() { return cExpressionParserRuleCall_3; }
		
		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_5() { return cLeftCurlyBracketKeyword_5; }
		
		//statements += Statement*
		public Assignment getStatementsAssignment_6() { return cStatementsAssignment_6; }
		
		//Statement
		public RuleCall getStatementsStatementParserRuleCall_6_0() { return cStatementsStatementParserRuleCall_6_0; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}
	public class ElseStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.ustb.cmp.MiniJava.ElseStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cElseStatementAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cElseKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cStatementsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cStatementsStatementParserRuleCall_3_0 = (RuleCall)cStatementsAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//// else {}
		//ElseStatement:
		//    {ElseStatement} "else" "{"
		//        statements += Statement*
		//    "}"
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{ElseStatement} "else" "{"
		//    statements += Statement*
		//"}"
		public Group getGroup() { return cGroup; }
		
		//{ElseStatement}
		public Action getElseStatementAction_0() { return cElseStatementAction_0; }
		
		//"else"
		public Keyword getElseKeyword_1() { return cElseKeyword_1; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//statements += Statement*
		public Assignment getStatementsAssignment_3() { return cStatementsAssignment_3; }
		
		//Statement
		public RuleCall getStatementsStatementParserRuleCall_3_0() { return cStatementsStatementParserRuleCall_3_0; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class WhileStatementsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.ustb.cmp.MiniJava.WhileStatements");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWhileKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cExpressionParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cStatementsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cStatementsStatementParserRuleCall_5_0 = (RuleCall)cStatementsAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//// while循环
		//WhileStatements:
		//    "while" "("Expression")" "{"
		//        statements += Statement*
		//    "}"
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"while" "("Expression")" "{"
		//    statements += Statement*
		//"}"
		public Group getGroup() { return cGroup; }
		
		//"while"
		public Keyword getWhileKeyword_0() { return cWhileKeyword_0; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//Expression
		public RuleCall getExpressionParserRuleCall_2() { return cExpressionParserRuleCall_2; }
		
		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }
		
		//statements += Statement*
		public Assignment getStatementsAssignment_5() { return cStatementsAssignment_5; }
		
		//Statement
		public RuleCall getStatementsStatementParserRuleCall_5_0() { return cStatementsStatementParserRuleCall_5_0; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class ReturnStatementsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.ustb.cmp.MiniJava.ReturnStatements");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cReturnKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExpAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpExpressionParserRuleCall_1_0 = (RuleCall)cExpAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//ReturnStatements:
		//    "return" exp=Expression ";"
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"return" exp=Expression ";"
		public Group getGroup() { return cGroup; }
		
		//"return"
		public Keyword getReturnKeyword_0() { return cReturnKeyword_0; }
		
		//exp=Expression
		public Assignment getExpAssignment_1() { return cExpAssignment_1; }
		
		//Expression
		public RuleCall getExpExpressionParserRuleCall_1_0() { return cExpExpressionParserRuleCall_1_0; }
		
		//";"
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}
	public class OperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.ustb.cmp.MiniJava.Operator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cExclamationMarkKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cAmpersandKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cVerticalLineKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cPlusSignKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cHyphenMinusKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cAsteriskKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cPercentSignKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cLessThanSignLessThanSignKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		private final Keyword cGreaterThanSignGreaterThanSignKeyword_8 = (Keyword)cAlternatives.eContents().get(8);
		private final Keyword cEqualsSignEqualsSignKeyword_9 = (Keyword)cAlternatives.eContents().get(9);
		private final Keyword cExclamationMarkEqualsSignKeyword_10 = (Keyword)cAlternatives.eContents().get(10);
		private final Keyword cGreaterThanSignEqualsSignKeyword_11 = (Keyword)cAlternatives.eContents().get(11);
		private final Keyword cLessThanSignEqualsSignKeyword_12 = (Keyword)cAlternatives.eContents().get(12);
		private final Keyword cGreaterThanSignKeyword_13 = (Keyword)cAlternatives.eContents().get(13);
		private final Keyword cLessThanSignKeyword_14 = (Keyword)cAlternatives.eContents().get(14);
		
		//// 操作符
		//Operator:
		//    "!" | "&" | "|" | "+" |  "-" |"*" |"%" |"<<" |">>" |"==" |"!=" | ">=" |"<=" |">" |"<"
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"!" | "&" | "|" | "+" |  "-" |"*" |"%" |"<<" |">>" |"==" |"!=" | ">=" |"<=" |">" |"<"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//"!"
		public Keyword getExclamationMarkKeyword_0() { return cExclamationMarkKeyword_0; }
		
		//"&"
		public Keyword getAmpersandKeyword_1() { return cAmpersandKeyword_1; }
		
		//"|"
		public Keyword getVerticalLineKeyword_2() { return cVerticalLineKeyword_2; }
		
		//"+"
		public Keyword getPlusSignKeyword_3() { return cPlusSignKeyword_3; }
		
		//"-"
		public Keyword getHyphenMinusKeyword_4() { return cHyphenMinusKeyword_4; }
		
		//"*"
		public Keyword getAsteriskKeyword_5() { return cAsteriskKeyword_5; }
		
		//"%"
		public Keyword getPercentSignKeyword_6() { return cPercentSignKeyword_6; }
		
		//"<<"
		public Keyword getLessThanSignLessThanSignKeyword_7() { return cLessThanSignLessThanSignKeyword_7; }
		
		//">>"
		public Keyword getGreaterThanSignGreaterThanSignKeyword_8() { return cGreaterThanSignGreaterThanSignKeyword_8; }
		
		//"=="
		public Keyword getEqualsSignEqualsSignKeyword_9() { return cEqualsSignEqualsSignKeyword_9; }
		
		//"!="
		public Keyword getExclamationMarkEqualsSignKeyword_10() { return cExclamationMarkEqualsSignKeyword_10; }
		
		//">="
		public Keyword getGreaterThanSignEqualsSignKeyword_11() { return cGreaterThanSignEqualsSignKeyword_11; }
		
		//"<="
		public Keyword getLessThanSignEqualsSignKeyword_12() { return cLessThanSignEqualsSignKeyword_12; }
		
		//">"
		public Keyword getGreaterThanSignKeyword_13() { return cGreaterThanSignKeyword_13; }
		
		//"<"
		public Keyword getLessThanSignKeyword_14() { return cLessThanSignKeyword_14; }
	}
	public class CalcExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.ustb.cmp.MiniJava.CalcExp");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cLeftNameAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cLeftNameIDTerminalRuleCall_0_0 = (RuleCall)cLeftNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cLeftNumAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cLeftNumINTTerminalRuleCall_1_0_0 = (RuleCall)cLeftNumAssignment_1_0.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOpOperatorParserRuleCall_1_1_0 = (RuleCall)cOpAssignment_1_1.eContents().get(0);
		private final Assignment cRightNameAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightNameIDTerminalRuleCall_1_2_0 = (RuleCall)cRightNameAssignment_1_2.eContents().get(0);
		private final Assignment cRightNumAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cRightNumINTTerminalRuleCall_2_0 = (RuleCall)cRightNumAssignment_2.eContents().get(0);
		
		//// 计算表达式
		//CalcExp:
		//    leftName=ID | leftNum=INT op=Operator rightName=ID | rightNum=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//leftName=ID | leftNum=INT op=Operator rightName=ID | rightNum=INT
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//leftName=ID
		public Assignment getLeftNameAssignment_0() { return cLeftNameAssignment_0; }
		
		//ID
		public RuleCall getLeftNameIDTerminalRuleCall_0_0() { return cLeftNameIDTerminalRuleCall_0_0; }
		
		//leftNum=INT op=Operator rightName=ID
		public Group getGroup_1() { return cGroup_1; }
		
		//leftNum=INT
		public Assignment getLeftNumAssignment_1_0() { return cLeftNumAssignment_1_0; }
		
		//INT
		public RuleCall getLeftNumINTTerminalRuleCall_1_0_0() { return cLeftNumINTTerminalRuleCall_1_0_0; }
		
		//op=Operator
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }
		
		//Operator
		public RuleCall getOpOperatorParserRuleCall_1_1_0() { return cOpOperatorParserRuleCall_1_1_0; }
		
		//rightName=ID
		public Assignment getRightNameAssignment_1_2() { return cRightNameAssignment_1_2; }
		
		//ID
		public RuleCall getRightNameIDTerminalRuleCall_1_2_0() { return cRightNameIDTerminalRuleCall_1_2_0; }
		
		//rightNum=INT
		public Assignment getRightNumAssignment_2() { return cRightNumAssignment_2; }
		
		//INT
		public RuleCall getRightNumINTTerminalRuleCall_2_0() { return cRightNumINTTerminalRuleCall_2_0; }
	}
	public class CompareExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.ustb.cmp.MiniJava.CompareExp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIdAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cIdQualifiedNameParserRuleCall_0_0 = (RuleCall)cIdAssignment_0.eContents().get(0);
		private final Assignment cOpAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOpOperatorParserRuleCall_1_0 = (RuleCall)cOpAssignment_1.eContents().get(0);
		private final Assignment cOther1Assignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOther1IDTerminalRuleCall_2_0 = (RuleCall)cOther1Assignment_2.eContents().get(0);
		private final Assignment cOther2Assignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Keyword cOther2NullKeyword_3_0 = (Keyword)cOther2Assignment_3.eContents().get(0);
		
		//// 比较式子
		//CompareExp:
		//    id=QualifiedName op=Operator other1+=ID* other2+="null"*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//id=QualifiedName op=Operator other1+=ID* other2+="null"*
		public Group getGroup() { return cGroup; }
		
		//id=QualifiedName
		public Assignment getIdAssignment_0() { return cIdAssignment_0; }
		
		//QualifiedName
		public RuleCall getIdQualifiedNameParserRuleCall_0_0() { return cIdQualifiedNameParserRuleCall_0_0; }
		
		//op=Operator
		public Assignment getOpAssignment_1() { return cOpAssignment_1; }
		
		//Operator
		public RuleCall getOpOperatorParserRuleCall_1_0() { return cOpOperatorParserRuleCall_1_0; }
		
		//other1+=ID*
		public Assignment getOther1Assignment_2() { return cOther1Assignment_2; }
		
		//ID
		public RuleCall getOther1IDTerminalRuleCall_2_0() { return cOther1IDTerminalRuleCall_2_0; }
		
		//other2+="null"*
		public Assignment getOther2Assignment_3() { return cOther2Assignment_3; }
		
		//"null"
		public Keyword getOther2NullKeyword_3_0() { return cOther2NullKeyword_3_0; }
	}
	public class BasicJudgeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.ustb.cmp.MiniJava.BasicJudge");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cBEAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cBEBooleanExpEnumRuleCall_0_0 = (RuleCall)cBEAssignment_0.eContents().get(0);
		private final Assignment cCmpAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cCmpCompareExpParserRuleCall_1_0 = (RuleCall)cCmpAssignment_1.eContents().get(0);
		
		//BasicJudge:
		//    bE=BooleanExp | cmp=CompareExp
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//bE=BooleanExp | cmp=CompareExp
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//bE=BooleanExp
		public Assignment getBEAssignment_0() { return cBEAssignment_0; }
		
		//BooleanExp
		public RuleCall getBEBooleanExpEnumRuleCall_0_0() { return cBEBooleanExpEnumRuleCall_0_0; }
		
		//cmp=CompareExp
		public Assignment getCmpAssignment_1() { return cCmpAssignment_1; }
		
		//CompareExp
		public RuleCall getCmpCompareExpParserRuleCall_1_0() { return cCmpCompareExpParserRuleCall_1_0; }
	}
	public class JudgeExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.ustb.cmp.MiniJava.JudgeExp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cExclamationMarkKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cBjAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cBjBasicJudgeParserRuleCall_2_0 = (RuleCall)cBjAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//// 判断式
		//JudgeExp:
		//    "!"* "("* bj=BasicJudge ")"*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"!"* "("* bj=BasicJudge ")"*
		public Group getGroup() { return cGroup; }
		
		//"!"*
		public Keyword getExclamationMarkKeyword_0() { return cExclamationMarkKeyword_0; }
		
		//"("*
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//bj=BasicJudge
		public Assignment getBjAssignment_2() { return cBjAssignment_2; }
		
		//BasicJudge
		public RuleCall getBjBasicJudgeParserRuleCall_2_0() { return cBjBasicJudgeParserRuleCall_2_0; }
		
		//")"*
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class NewExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.ustb.cmp.MiniJava.NewExp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNewKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cParamsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cParamsParameterParserRuleCall_3_0 = (RuleCall)cParamsAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//// 创建对象表达式
		//NewExp:
		//    "new" name=ID "("(params+=Parameter)*")"
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"new" name=ID "("(params+=Parameter)*")"
		public Group getGroup() { return cGroup; }
		
		//"new"
		public Keyword getNewKeyword_0() { return cNewKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//(params+=Parameter)*
		public Assignment getParamsAssignment_3() { return cParamsAssignment_3; }
		
		//Parameter
		public RuleCall getParamsParameterParserRuleCall_3_0() { return cParamsParameterParserRuleCall_3_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.ustb.cmp.MiniJava.Expression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cConstAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cConstConstantValueParserRuleCall_0_0 = (RuleCall)cConstAssignment_0.eContents().get(0);
		private final Assignment cCeAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cCeCalcExpParserRuleCall_1_0 = (RuleCall)cCeAssignment_1.eContents().get(0);
		private final Assignment cJeAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cJeJudgeExpParserRuleCall_2_0 = (RuleCall)cJeAssignment_2.eContents().get(0);
		private final Assignment cNeAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cNeNewExpParserRuleCall_3_0 = (RuleCall)cNeAssignment_3.eContents().get(0);
		
		//// 表达式
		//Expression:
		//    const=ConstantValue | ce=CalcExp | je=JudgeExp | ne=NewExp
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//const=ConstantValue | ce=CalcExp | je=JudgeExp | ne=NewExp
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//const=ConstantValue
		public Assignment getConstAssignment_0() { return cConstAssignment_0; }
		
		//ConstantValue
		public RuleCall getConstConstantValueParserRuleCall_0_0() { return cConstConstantValueParserRuleCall_0_0; }
		
		//ce=CalcExp
		public Assignment getCeAssignment_1() { return cCeAssignment_1; }
		
		//CalcExp
		public RuleCall getCeCalcExpParserRuleCall_1_0() { return cCeCalcExpParserRuleCall_1_0; }
		
		//je=JudgeExp
		public Assignment getJeAssignment_2() { return cJeAssignment_2; }
		
		//JudgeExp
		public RuleCall getJeJudgeExpParserRuleCall_2_0() { return cJeJudgeExpParserRuleCall_2_0; }
		
		//ne=NewExp
		public Assignment getNeAssignment_3() { return cNeAssignment_3; }
		
		//NewExp
		public RuleCall getNeNewExpParserRuleCall_3_0() { return cNeNewExpParserRuleCall_3_0; }
	}
	
	public class DomainElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "edu.ustb.cmp.MiniJava.Domain");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cPUBLICEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cPUBLICPublicKeyword_0_0 = (Keyword)cPUBLICEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cPRIVATEEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cPRIVATEPrivateKeyword_1_0 = (Keyword)cPRIVATEEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cPROTECTEDEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cPROTECTEDProtectedKeyword_2_0 = (Keyword)cPROTECTEDEnumLiteralDeclaration_2.eContents().get(0);
		
		//// 方法体作用域
		//enum Domain:
		//    PUBLIC="public" | PRIVATE="private" | PROTECTED="protected"
		//;
		public EnumRule getRule() { return rule; }
		
		//PUBLIC="public" | PRIVATE="private" | PROTECTED="protected"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//PUBLIC="public"
		public EnumLiteralDeclaration getPUBLICEnumLiteralDeclaration_0() { return cPUBLICEnumLiteralDeclaration_0; }
		
		//"public"
		public Keyword getPUBLICPublicKeyword_0_0() { return cPUBLICPublicKeyword_0_0; }
		
		//PRIVATE="private"
		public EnumLiteralDeclaration getPRIVATEEnumLiteralDeclaration_1() { return cPRIVATEEnumLiteralDeclaration_1; }
		
		//"private"
		public Keyword getPRIVATEPrivateKeyword_1_0() { return cPRIVATEPrivateKeyword_1_0; }
		
		//PROTECTED="protected"
		public EnumLiteralDeclaration getPROTECTEDEnumLiteralDeclaration_2() { return cPROTECTEDEnumLiteralDeclaration_2; }
		
		//"protected"
		public Keyword getPROTECTEDProtectedKeyword_2_0() { return cPROTECTEDProtectedKeyword_2_0; }
	}
	public class ExtraAttrElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "edu.ustb.cmp.MiniJava.ExtraAttr");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cSTATICEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cSTATICStaticKeyword_0_0 = (Keyword)cSTATICEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cABSTRACTEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cABSTRACTAbstractKeyword_1_0 = (Keyword)cABSTRACTEnumLiteralDeclaration_1.eContents().get(0);
		
		//// 额外属性
		//enum ExtraAttr:
		//    STATIC="static" | ABSTRACT="abstract"
		//;
		public EnumRule getRule() { return rule; }
		
		//STATIC="static" | ABSTRACT="abstract"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//STATIC="static"
		public EnumLiteralDeclaration getSTATICEnumLiteralDeclaration_0() { return cSTATICEnumLiteralDeclaration_0; }
		
		//"static"
		public Keyword getSTATICStaticKeyword_0_0() { return cSTATICStaticKeyword_0_0; }
		
		//ABSTRACT="abstract"
		public EnumLiteralDeclaration getABSTRACTEnumLiteralDeclaration_1() { return cABSTRACTEnumLiteralDeclaration_1; }
		
		//"abstract"
		public Keyword getABSTRACTAbstractKeyword_1_0() { return cABSTRACTAbstractKeyword_1_0; }
	}
	public class BooleanExpElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "edu.ustb.cmp.MiniJava.BooleanExp");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cTRUEEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cTRUETrueKeyword_0_0 = (Keyword)cTRUEEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cFALSEEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cFALSEFalseKeyword_1_0 = (Keyword)cFALSEEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum BooleanExp:
		//    TRUE="true" | FALSE="false"
		//;
		public EnumRule getRule() { return rule; }
		
		//TRUE="true" | FALSE="false"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//TRUE="true"
		public EnumLiteralDeclaration getTRUEEnumLiteralDeclaration_0() { return cTRUEEnumLiteralDeclaration_0; }
		
		//"true"
		public Keyword getTRUETrueKeyword_0_0() { return cTRUETrueKeyword_0_0; }
		
		//FALSE="false"
		public EnumLiteralDeclaration getFALSEEnumLiteralDeclaration_1() { return cFALSEEnumLiteralDeclaration_1; }
		
		//"false"
		public Keyword getFALSEFalseKeyword_1_0() { return cFALSEFalseKeyword_1_0; }
	}
	
	private final MiniJavaElements pMiniJava;
	private final PackageDeclElements pPackageDecl;
	private final ImportDeclElements pImportDecl;
	private final MainClassDeclElements pMainClassDecl;
	private final ClassDeclElements pClassDecl;
	private final QualifiedNameElements pQualifiedName;
	private final DoubleLiteralElements pDoubleLiteral;
	private final ConstantValueElements pConstantValue;
	private final BasicDataTypeElements pBasicDataType;
	private final DataTypeElements pDataType;
	private final VariableDeclElements pVariableDecl;
	private final DomainElements eDomain;
	private final ExtraAttrElements eExtraAttr;
	private final ReturnTypeElements pReturnType;
	private final ParameterElements pParameter;
	private final MethodDeclElements pMethodDecl;
	private final MemberElements pMember;
	private final StatementElements pStatement;
	private final LValueExpElements pLValueExp;
	private final AssignmentsElements pAssignments;
	private final IfStatementsElements pIfStatements;
	private final ElseIfStatementsElements pElseIfStatements;
	private final ElseStatementElements pElseStatement;
	private final WhileStatementsElements pWhileStatements;
	private final ReturnStatementsElements pReturnStatements;
	private final OperatorElements pOperator;
	private final CalcExpElements pCalcExp;
	private final BooleanExpElements eBooleanExp;
	private final CompareExpElements pCompareExp;
	private final BasicJudgeElements pBasicJudge;
	private final JudgeExpElements pJudgeExp;
	private final NewExpElements pNewExp;
	private final ExpressionElements pExpression;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public MiniJavaGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pMiniJava = new MiniJavaElements();
		this.pPackageDecl = new PackageDeclElements();
		this.pImportDecl = new ImportDeclElements();
		this.pMainClassDecl = new MainClassDeclElements();
		this.pClassDecl = new ClassDeclElements();
		this.pQualifiedName = new QualifiedNameElements();
		this.pDoubleLiteral = new DoubleLiteralElements();
		this.pConstantValue = new ConstantValueElements();
		this.pBasicDataType = new BasicDataTypeElements();
		this.pDataType = new DataTypeElements();
		this.pVariableDecl = new VariableDeclElements();
		this.eDomain = new DomainElements();
		this.eExtraAttr = new ExtraAttrElements();
		this.pReturnType = new ReturnTypeElements();
		this.pParameter = new ParameterElements();
		this.pMethodDecl = new MethodDeclElements();
		this.pMember = new MemberElements();
		this.pStatement = new StatementElements();
		this.pLValueExp = new LValueExpElements();
		this.pAssignments = new AssignmentsElements();
		this.pIfStatements = new IfStatementsElements();
		this.pElseIfStatements = new ElseIfStatementsElements();
		this.pElseStatement = new ElseStatementElements();
		this.pWhileStatements = new WhileStatementsElements();
		this.pReturnStatements = new ReturnStatementsElements();
		this.pOperator = new OperatorElements();
		this.pCalcExp = new CalcExpElements();
		this.eBooleanExp = new BooleanExpElements();
		this.pCompareExp = new CompareExpElements();
		this.pBasicJudge = new BasicJudgeElements();
		this.pJudgeExp = new JudgeExpElements();
		this.pNewExp = new NewExpElements();
		this.pExpression = new ExpressionElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("edu.ustb.cmp.MiniJava".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//// 整个MiniJava文件的结构体定义，.mj文件
	///* package:类包定位 : PackageDef
	// * import*:导包内容
	// * MianClass:只执行主方法
	// * class: 其他class类定义
	// * */
	//// mj文件结构定义，从上到下依次为:
	//// package描述
	//// imports 描述
	//// 主类固定声明
	//// 其他类声明
	//MiniJava :
	//    package = PackageDecl
	//    imports += ImportDecl*
	//    mainclass = MainClassDecl
	//    classes += ClassDecl*;
	public MiniJavaElements getMiniJavaAccess() {
		return pMiniJava;
	}
	
	public ParserRule getMiniJavaRule() {
		return getMiniJavaAccess().getRule();
	}
	
	//// 基本全局定义
	//// 包
	//PackageDecl:
	//    'package' name = QualifiedName ';'
	//;
	public PackageDeclElements getPackageDeclAccess() {
		return pPackageDecl;
	}
	
	public ParserRule getPackageDeclRule() {
		return getPackageDeclAccess().getRule();
	}
	
	//// 导包
	//ImportDecl:
	//    'import' anchor = QualifiedName ';'
	//;
	public ImportDeclElements getImportDeclAccess() {
		return pImportDecl;
	}
	
	public ParserRule getImportDeclRule() {
		return getImportDeclAccess().getRule();
	}
	
	//// 主类定义，执行主方法
	//MainClassDecl:
	//    {MainClassDecl} "class" ID "{"
	//        "public" "static" "void" "main" "(" "String" "[" "]" name=ID ")" "{"
	//            statements += Statement*
	//        "}"
	//    "}"
	//;
	public MainClassDeclElements getMainClassDeclAccess() {
		return pMainClassDecl;
	}
	
	public ParserRule getMainClassDeclRule() {
		return getMainClassDeclAccess().getRule();
	}
	
	//// 其他类定义
	//ClassDecl:
	//    "class" name = ID ("extends" superClass=[ClassDecl | QualifiedName])? ("implements" implementz += [ClassDecl | QualifiedName] )? "{"
	//        members += Member*
	//    "}"
	//;
	public ClassDeclElements getClassDeclAccess() {
		return pClassDecl;
	}
	
	public ParserRule getClassDeclRule() {
		return getClassDeclAccess().getRule();
	}
	
	//// 合法名称定义
	//QualifiedName:
	//    ID ('.' ID)*
	//;
	public QualifiedNameElements getQualifiedNameAccess() {
		return pQualifiedName;
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}
	
	//// 浮点数表示方法
	//DoubleLiteral:
	//    INT'.'INT
	//;
	public DoubleLiteralElements getDoubleLiteralAccess() {
		return pDoubleLiteral;
	}
	
	public ParserRule getDoubleLiteralRule() {
		return getDoubleLiteralAccess().getRule();
	}
	
	//// 常量定义
	//ConstantValue:
	//    STRING | INT | DoubleLiteral
	//;
	public ConstantValueElements getConstantValueAccess() {
		return pConstantValue;
	}
	
	public ParserRule getConstantValueRule() {
		return getConstantValueAccess().getRule();
	}
	
	//// 4个基本数据类型
	//BasicDataType:
	//    "int" | "boolean" | "double" | "char" | "long"
	//;
	public BasicDataTypeElements getBasicDataTypeAccess() {
		return pBasicDataType;
	}
	
	public ParserRule getBasicDataTypeRule() {
		return getBasicDataTypeAccess().getRule();
	}
	
	//// DataType：普通变量或数组
	//DataType:
	//     BasicDataType | QualifiedName | BasicDataType "[" "]"
	//;
	public DataTypeElements getDataTypeAccess() {
		return pDataType;
	}
	
	public ParserRule getDataTypeRule() {
		return getDataTypeAccess().getRule();
	}
	
	//// 变量定义
	//// eg: int a;
	//VariableDecl:
	//    varType = DataType name = ID ("=")? value=ConstantValue? ";"
	//;
	public VariableDeclElements getVariableDeclAccess() {
		return pVariableDecl;
	}
	
	public ParserRule getVariableDeclRule() {
		return getVariableDeclAccess().getRule();
	}
	
	//// 方法体作用域
	//enum Domain:
	//    PUBLIC="public" | PRIVATE="private" | PROTECTED="protected"
	//;
	public DomainElements getDomainAccess() {
		return eDomain;
	}
	
	public EnumRule getDomainRule() {
		return getDomainAccess().getRule();
	}
	
	//// 额外属性
	//enum ExtraAttr:
	//    STATIC="static" | ABSTRACT="abstract"
	//;
	public ExtraAttrElements getExtraAttrAccess() {
		return eExtraAttr;
	}
	
	public EnumRule getExtraAttrRule() {
		return getExtraAttrAccess().getRule();
	}
	
	//// 返回类型
	//ReturnType:
	//    DataType | "void"
	//;
	public ReturnTypeElements getReturnTypeAccess() {
		return pReturnType;
	}
	
	public ParserRule getReturnTypeRule() {
		return getReturnTypeAccess().getRule();
	}
	
	//// 参数类型
	//Parameter:
	//    type=DataType name=ID ","?
	//;
	public ParameterElements getParameterAccess() {
		return pParameter;
	}
	
	public ParserRule getParameterRule() {
		return getParameterAccess().getRule();
	}
	
	//// 方法体定义
	//// eg: public void max(int a, int b) {
	////         ...
	//// }
	//MethodDecl:
	//    domain = Domain extra=(ExtraAttr)? retType=ReturnType name=ID "("(params += Parameter)*")" "{"
	//        statements += Statement*
	//    "}"
	//;
	public MethodDeclElements getMethodDeclAccess() {
		return pMethodDecl;
	}
	
	public ParserRule getMethodDeclRule() {
		return getMethodDeclAccess().getRule();
	}
	
	//// 类成员定义: 变量和方法体
	//Member:
	//    VariableDecl | MethodDecl
	//;
	public MemberElements getMemberAccess() {
		return pMember;
	}
	
	public ParserRule getMemberRule() {
		return getMemberAccess().getRule();
	}
	
	//// 代码陈述语句
	///* return
	// * int a
	// * a = 0
	// * a = a * 2
	// * if (a = 0)
	// * while ()
	// * for
	// * */
	//Statement:
	//     varDef=VariableDecl |assign=Assignments | ifStat=IfStatements | whileStat=WhileStatements | retStat=ReturnStatements
	//;
	public StatementElements getStatementAccess() {
		return pStatement;
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}
	
	//// 左值表达式
	//LValueExp:
	//    id=ID | exp=Expression "." id=QualifiedName| exp=Expression"["index = Expression"]"
	//;
	public LValueExpElements getLValueExpAccess() {
		return pLValueExp;
	}
	
	public ParserRule getLValueExpRule() {
		return getLValueExpAccess().getRule();
	}
	
	//// 赋值语句
	//Assignments:
	//    leftValue=LValueExp "=" expression=Expression ";"
	//;
	public AssignmentsElements getAssignmentsAccess() {
		return pAssignments;
	}
	
	public ParserRule getAssignmentsRule() {
		return getAssignmentsAccess().getRule();
	}
	
	//// 判断语句
	//IfStatements:
	//    "if" "("Expression")" "{"
	//        statements += Statement*
	//    "}" elseIf += ElseIfStatements*
	//    else += ElseStatement*
	//;
	public IfStatementsElements getIfStatementsAccess() {
		return pIfStatements;
	}
	
	public ParserRule getIfStatementsRule() {
		return getIfStatementsAccess().getRule();
	}
	
	//// else if () {}
	//ElseIfStatements:
	//    "else" "if" "("Expression")" "{"
	//        statements += Statement*
	//    "}"
	//;
	public ElseIfStatementsElements getElseIfStatementsAccess() {
		return pElseIfStatements;
	}
	
	public ParserRule getElseIfStatementsRule() {
		return getElseIfStatementsAccess().getRule();
	}
	
	//// else {}
	//ElseStatement:
	//    {ElseStatement} "else" "{"
	//        statements += Statement*
	//    "}"
	//;
	public ElseStatementElements getElseStatementAccess() {
		return pElseStatement;
	}
	
	public ParserRule getElseStatementRule() {
		return getElseStatementAccess().getRule();
	}
	
	//// while循环
	//WhileStatements:
	//    "while" "("Expression")" "{"
	//        statements += Statement*
	//    "}"
	//;
	public WhileStatementsElements getWhileStatementsAccess() {
		return pWhileStatements;
	}
	
	public ParserRule getWhileStatementsRule() {
		return getWhileStatementsAccess().getRule();
	}
	
	//ReturnStatements:
	//    "return" exp=Expression ";"
	//;
	public ReturnStatementsElements getReturnStatementsAccess() {
		return pReturnStatements;
	}
	
	public ParserRule getReturnStatementsRule() {
		return getReturnStatementsAccess().getRule();
	}
	
	//// 操作符
	//Operator:
	//    "!" | "&" | "|" | "+" |  "-" |"*" |"%" |"<<" |">>" |"==" |"!=" | ">=" |"<=" |">" |"<"
	//;
	public OperatorElements getOperatorAccess() {
		return pOperator;
	}
	
	public ParserRule getOperatorRule() {
		return getOperatorAccess().getRule();
	}
	
	//// 计算表达式
	//CalcExp:
	//    leftName=ID | leftNum=INT op=Operator rightName=ID | rightNum=INT;
	public CalcExpElements getCalcExpAccess() {
		return pCalcExp;
	}
	
	public ParserRule getCalcExpRule() {
		return getCalcExpAccess().getRule();
	}
	
	//enum BooleanExp:
	//    TRUE="true" | FALSE="false"
	//;
	public BooleanExpElements getBooleanExpAccess() {
		return eBooleanExp;
	}
	
	public EnumRule getBooleanExpRule() {
		return getBooleanExpAccess().getRule();
	}
	
	//// 比较式子
	//CompareExp:
	//    id=QualifiedName op=Operator other1+=ID* other2+="null"*
	//;
	public CompareExpElements getCompareExpAccess() {
		return pCompareExp;
	}
	
	public ParserRule getCompareExpRule() {
		return getCompareExpAccess().getRule();
	}
	
	//BasicJudge:
	//    bE=BooleanExp | cmp=CompareExp
	//;
	public BasicJudgeElements getBasicJudgeAccess() {
		return pBasicJudge;
	}
	
	public ParserRule getBasicJudgeRule() {
		return getBasicJudgeAccess().getRule();
	}
	
	//// 判断式
	//JudgeExp:
	//    "!"* "("* bj=BasicJudge ")"*
	//;
	public JudgeExpElements getJudgeExpAccess() {
		return pJudgeExp;
	}
	
	public ParserRule getJudgeExpRule() {
		return getJudgeExpAccess().getRule();
	}
	
	//// 创建对象表达式
	//NewExp:
	//    "new" name=ID "("(params+=Parameter)*")"
	//;
	public NewExpElements getNewExpAccess() {
		return pNewExp;
	}
	
	public ParserRule getNewExpRule() {
		return getNewExpAccess().getRule();
	}
	
	//// 表达式
	//Expression:
	//    const=ConstantValue | ce=CalcExp | je=JudgeExp | ne=NewExp
	//;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}

/*
 * generated by Xtext 2.25.0
 */
grammar InternalMiniJava;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package edu.ustb.cmp.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package edu.ustb.cmp.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import edu.ustb.cmp.services.MiniJavaGrammarAccess;

}

@parser::members {

 	private MiniJavaGrammarAccess grammarAccess;

    public InternalMiniJavaParser(TokenStream input, MiniJavaGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "MiniJava";
   	}

   	@Override
   	protected MiniJavaGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleMiniJava
entryRuleMiniJava returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMiniJavaRule()); }
	iv_ruleMiniJava=ruleMiniJava
	{ $current=$iv_ruleMiniJava.current; }
	EOF;

// Rule MiniJava
ruleMiniJava returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getMiniJavaAccess().getPackagePackageDeclParserRuleCall_0_0());
				}
				lv_package_0_0=rulePackageDecl
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMiniJavaRule());
					}
					set(
						$current,
						"package",
						lv_package_0_0,
						"edu.ustb.cmp.MiniJava.PackageDecl");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getMiniJavaAccess().getImportsImportDeclParserRuleCall_1_0());
				}
				lv_imports_1_0=ruleImportDecl
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMiniJavaRule());
					}
					add(
						$current,
						"imports",
						lv_imports_1_0,
						"edu.ustb.cmp.MiniJava.ImportDecl");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			(
				{
					newCompositeNode(grammarAccess.getMiniJavaAccess().getMainclassMainClassDeclParserRuleCall_2_0());
				}
				lv_mainclass_2_0=ruleMainClassDecl
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMiniJavaRule());
					}
					set(
						$current,
						"mainclass",
						lv_mainclass_2_0,
						"edu.ustb.cmp.MiniJava.MainClassDecl");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getMiniJavaAccess().getClassesClassDeclParserRuleCall_3_0());
				}
				lv_classes_3_0=ruleClassDecl
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMiniJavaRule());
					}
					add(
						$current,
						"classes",
						lv_classes_3_0,
						"edu.ustb.cmp.MiniJava.ClassDecl");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRulePackageDecl
entryRulePackageDecl returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPackageDeclRule()); }
	iv_rulePackageDecl=rulePackageDecl
	{ $current=$iv_rulePackageDecl.current; }
	EOF;

// Rule PackageDecl
rulePackageDecl returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='package'
		{
			newLeafNode(otherlv_0, grammarAccess.getPackageDeclAccess().getPackageKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getPackageDeclAccess().getNameQualifiedNameParserRuleCall_1_0());
				}
				lv_name_1_0=ruleQualifiedName
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPackageDeclRule());
					}
					set(
						$current,
						"name",
						lv_name_1_0,
						"edu.ustb.cmp.MiniJava.QualifiedName");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2=';'
		{
			newLeafNode(otherlv_2, grammarAccess.getPackageDeclAccess().getSemicolonKeyword_2());
		}
	)
;

// Entry rule entryRuleImportDecl
entryRuleImportDecl returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getImportDeclRule()); }
	iv_ruleImportDecl=ruleImportDecl
	{ $current=$iv_ruleImportDecl.current; }
	EOF;

// Rule ImportDecl
ruleImportDecl returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='import'
		{
			newLeafNode(otherlv_0, grammarAccess.getImportDeclAccess().getImportKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getImportDeclAccess().getAnchorQualifiedNameParserRuleCall_1_0());
				}
				lv_anchor_1_0=ruleQualifiedName
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getImportDeclRule());
					}
					set(
						$current,
						"anchor",
						lv_anchor_1_0,
						"edu.ustb.cmp.MiniJava.QualifiedName");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2=';'
		{
			newLeafNode(otherlv_2, grammarAccess.getImportDeclAccess().getSemicolonKeyword_2());
		}
	)
;

// Entry rule entryRuleMainClassDecl
entryRuleMainClassDecl returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMainClassDeclRule()); }
	iv_ruleMainClassDecl=ruleMainClassDecl
	{ $current=$iv_ruleMainClassDecl.current; }
	EOF;

// Rule MainClassDecl
ruleMainClassDecl returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getMainClassDeclAccess().getMainClassDeclAction_0(),
					$current);
			}
		)
		otherlv_1='class'
		{
			newLeafNode(otherlv_1, grammarAccess.getMainClassDeclAccess().getClassKeyword_1());
		}
		this_ID_2=RULE_ID
		{
			newLeafNode(this_ID_2, grammarAccess.getMainClassDeclAccess().getIDTerminalRuleCall_2());
		}
		otherlv_3='{'
		{
			newLeafNode(otherlv_3, grammarAccess.getMainClassDeclAccess().getLeftCurlyBracketKeyword_3());
		}
		otherlv_4='public'
		{
			newLeafNode(otherlv_4, grammarAccess.getMainClassDeclAccess().getPublicKeyword_4());
		}
		otherlv_5='static'
		{
			newLeafNode(otherlv_5, grammarAccess.getMainClassDeclAccess().getStaticKeyword_5());
		}
		otherlv_6='void'
		{
			newLeafNode(otherlv_6, grammarAccess.getMainClassDeclAccess().getVoidKeyword_6());
		}
		otherlv_7='main'
		{
			newLeafNode(otherlv_7, grammarAccess.getMainClassDeclAccess().getMainKeyword_7());
		}
		otherlv_8='('
		{
			newLeafNode(otherlv_8, grammarAccess.getMainClassDeclAccess().getLeftParenthesisKeyword_8());
		}
		otherlv_9='String'
		{
			newLeafNode(otherlv_9, grammarAccess.getMainClassDeclAccess().getStringKeyword_9());
		}
		otherlv_10='['
		{
			newLeafNode(otherlv_10, grammarAccess.getMainClassDeclAccess().getLeftSquareBracketKeyword_10());
		}
		otherlv_11=']'
		{
			newLeafNode(otherlv_11, grammarAccess.getMainClassDeclAccess().getRightSquareBracketKeyword_11());
		}
		(
			(
				lv_name_12_0=RULE_ID
				{
					newLeafNode(lv_name_12_0, grammarAccess.getMainClassDeclAccess().getNameIDTerminalRuleCall_12_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getMainClassDeclRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_12_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_13=')'
		{
			newLeafNode(otherlv_13, grammarAccess.getMainClassDeclAccess().getRightParenthesisKeyword_13());
		}
		otherlv_14='{'
		{
			newLeafNode(otherlv_14, grammarAccess.getMainClassDeclAccess().getLeftCurlyBracketKeyword_14());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getMainClassDeclAccess().getStatementsStatementParserRuleCall_15_0());
				}
				lv_statements_15_0=ruleStatement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMainClassDeclRule());
					}
					add(
						$current,
						"statements",
						lv_statements_15_0,
						"edu.ustb.cmp.MiniJava.Statement");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_16='}'
		{
			newLeafNode(otherlv_16, grammarAccess.getMainClassDeclAccess().getRightCurlyBracketKeyword_16());
		}
		otherlv_17='}'
		{
			newLeafNode(otherlv_17, grammarAccess.getMainClassDeclAccess().getRightCurlyBracketKeyword_17());
		}
	)
;

// Entry rule entryRuleClassDecl
entryRuleClassDecl returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getClassDeclRule()); }
	iv_ruleClassDecl=ruleClassDecl
	{ $current=$iv_ruleClassDecl.current; }
	EOF;

// Rule ClassDecl
ruleClassDecl returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='class'
		{
			newLeafNode(otherlv_0, grammarAccess.getClassDeclAccess().getClassKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getClassDeclAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getClassDeclRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			otherlv_2='extends'
			{
				newLeafNode(otherlv_2, grammarAccess.getClassDeclAccess().getExtendsKeyword_2_0());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getClassDeclRule());
						}
					}
					{
						newCompositeNode(grammarAccess.getClassDeclAccess().getSuperClassClassDeclCrossReference_2_1_0());
					}
					ruleQualifiedName
					{
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		(
			otherlv_4='implements'
			{
				newLeafNode(otherlv_4, grammarAccess.getClassDeclAccess().getImplementsKeyword_3_0());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getClassDeclRule());
						}
					}
					{
						newCompositeNode(grammarAccess.getClassDeclAccess().getImplementzClassDeclCrossReference_3_1_0());
					}
					ruleQualifiedName
					{
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		otherlv_6='{'
		{
			newLeafNode(otherlv_6, grammarAccess.getClassDeclAccess().getLeftCurlyBracketKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getClassDeclAccess().getMembersMemberParserRuleCall_5_0());
				}
				lv_members_7_0=ruleMember
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getClassDeclRule());
					}
					add(
						$current,
						"members",
						lv_members_7_0,
						"edu.ustb.cmp.MiniJava.Member");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_8='}'
		{
			newLeafNode(otherlv_8, grammarAccess.getClassDeclAccess().getRightCurlyBracketKeyword_6());
		}
	)
;

// Entry rule entryRuleQualifiedName
entryRuleQualifiedName returns [String current=null]:
	{ newCompositeNode(grammarAccess.getQualifiedNameRule()); }
	iv_ruleQualifiedName=ruleQualifiedName
	{ $current=$iv_ruleQualifiedName.current.getText(); }
	EOF;

// Rule QualifiedName
ruleQualifiedName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_ID_0=RULE_ID
		{
			$current.merge(this_ID_0);
		}
		{
			newLeafNode(this_ID_0, grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_0());
		}
		(
			kw='.'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getQualifiedNameAccess().getFullStopKeyword_1_0());
			}
			this_ID_2=RULE_ID
			{
				$current.merge(this_ID_2);
			}
			{
				newLeafNode(this_ID_2, grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_1_1());
			}
		)*
	)
;

// Entry rule entryRuleDoubleLiteral
entryRuleDoubleLiteral returns [String current=null]:
	{ newCompositeNode(grammarAccess.getDoubleLiteralRule()); }
	iv_ruleDoubleLiteral=ruleDoubleLiteral
	{ $current=$iv_ruleDoubleLiteral.current.getText(); }
	EOF;

// Rule DoubleLiteral
ruleDoubleLiteral returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_INT_0=RULE_INT
		{
			$current.merge(this_INT_0);
		}
		{
			newLeafNode(this_INT_0, grammarAccess.getDoubleLiteralAccess().getINTTerminalRuleCall_0());
		}
		kw='.'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getDoubleLiteralAccess().getFullStopKeyword_1());
		}
		this_INT_2=RULE_INT
		{
			$current.merge(this_INT_2);
		}
		{
			newLeafNode(this_INT_2, grammarAccess.getDoubleLiteralAccess().getINTTerminalRuleCall_2());
		}
	)
;

// Entry rule entryRuleConstantValue
entryRuleConstantValue returns [String current=null]:
	{ newCompositeNode(grammarAccess.getConstantValueRule()); }
	iv_ruleConstantValue=ruleConstantValue
	{ $current=$iv_ruleConstantValue.current.getText(); }
	EOF;

// Rule ConstantValue
ruleConstantValue returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_STRING_0=RULE_STRING
		{
			$current.merge(this_STRING_0);
		}
		{
			newLeafNode(this_STRING_0, grammarAccess.getConstantValueAccess().getSTRINGTerminalRuleCall_0());
		}
		    |
		this_INT_1=RULE_INT
		{
			$current.merge(this_INT_1);
		}
		{
			newLeafNode(this_INT_1, grammarAccess.getConstantValueAccess().getINTTerminalRuleCall_1());
		}
		    |
		{
			newCompositeNode(grammarAccess.getConstantValueAccess().getDoubleLiteralParserRuleCall_2());
		}
		this_DoubleLiteral_2=ruleDoubleLiteral
		{
			$current.merge(this_DoubleLiteral_2);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleBasicDataType
entryRuleBasicDataType returns [String current=null]:
	{ newCompositeNode(grammarAccess.getBasicDataTypeRule()); }
	iv_ruleBasicDataType=ruleBasicDataType
	{ $current=$iv_ruleBasicDataType.current.getText(); }
	EOF;

// Rule BasicDataType
ruleBasicDataType returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='int'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getBasicDataTypeAccess().getIntKeyword_0());
		}
		    |
		kw='boolean'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getBasicDataTypeAccess().getBooleanKeyword_1());
		}
		    |
		kw='double'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getBasicDataTypeAccess().getDoubleKeyword_2());
		}
		    |
		kw='char'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getBasicDataTypeAccess().getCharKeyword_3());
		}
		    |
		kw='long'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getBasicDataTypeAccess().getLongKeyword_4());
		}
	)
;

// Entry rule entryRuleDataType
entryRuleDataType returns [String current=null]:
	{ newCompositeNode(grammarAccess.getDataTypeRule()); }
	iv_ruleDataType=ruleDataType
	{ $current=$iv_ruleDataType.current.getText(); }
	EOF;

// Rule DataType
ruleDataType returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getDataTypeAccess().getBasicDataTypeParserRuleCall_0());
		}
		this_BasicDataType_0=ruleBasicDataType
		{
			$current.merge(this_BasicDataType_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getDataTypeAccess().getQualifiedNameParserRuleCall_1());
		}
		this_QualifiedName_1=ruleQualifiedName
		{
			$current.merge(this_QualifiedName_1);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		(
			{
				newCompositeNode(grammarAccess.getDataTypeAccess().getBasicDataTypeParserRuleCall_2_0());
			}
			this_BasicDataType_2=ruleBasicDataType
			{
				$current.merge(this_BasicDataType_2);
			}
			{
				afterParserOrEnumRuleCall();
			}
			kw='['
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getDataTypeAccess().getLeftSquareBracketKeyword_2_1());
			}
			kw=']'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getDataTypeAccess().getRightSquareBracketKeyword_2_2());
			}
		)
	)
;

// Entry rule entryRuleVariableDecl
entryRuleVariableDecl returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVariableDeclRule()); }
	iv_ruleVariableDecl=ruleVariableDecl
	{ $current=$iv_ruleVariableDecl.current; }
	EOF;

// Rule VariableDecl
ruleVariableDecl returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getVariableDeclAccess().getVarTypeDataTypeParserRuleCall_0_0());
				}
				lv_varType_0_0=ruleDataType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getVariableDeclRule());
					}
					set(
						$current,
						"varType",
						lv_varType_0_0,
						"edu.ustb.cmp.MiniJava.DataType");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getVariableDeclAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getVariableDeclRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			otherlv_2='='
			{
				newLeafNode(otherlv_2, grammarAccess.getVariableDeclAccess().getEqualsSignKeyword_2());
			}
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getVariableDeclAccess().getValueConstantValueParserRuleCall_3_0());
				}
				lv_value_3_0=ruleConstantValue
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getVariableDeclRule());
					}
					set(
						$current,
						"value",
						lv_value_3_0,
						"edu.ustb.cmp.MiniJava.ConstantValue");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		otherlv_4=';'
		{
			newLeafNode(otherlv_4, grammarAccess.getVariableDeclAccess().getSemicolonKeyword_4());
		}
	)
;

// Entry rule entryRuleReturnType
entryRuleReturnType returns [String current=null]:
	{ newCompositeNode(grammarAccess.getReturnTypeRule()); }
	iv_ruleReturnType=ruleReturnType
	{ $current=$iv_ruleReturnType.current.getText(); }
	EOF;

// Rule ReturnType
ruleReturnType returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getReturnTypeAccess().getDataTypeParserRuleCall_0());
		}
		this_DataType_0=ruleDataType
		{
			$current.merge(this_DataType_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		kw='void'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getReturnTypeAccess().getVoidKeyword_1());
		}
	)
;

// Entry rule entryRuleParameter
entryRuleParameter returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getParameterRule()); }
	iv_ruleParameter=ruleParameter
	{ $current=$iv_ruleParameter.current; }
	EOF;

// Rule Parameter
ruleParameter returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getParameterAccess().getTypeDataTypeParserRuleCall_0_0());
				}
				lv_type_0_0=ruleDataType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getParameterRule());
					}
					set(
						$current,
						"type",
						lv_type_0_0,
						"edu.ustb.cmp.MiniJava.DataType");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getParameterAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getParameterRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			otherlv_2=','
			{
				newLeafNode(otherlv_2, grammarAccess.getParameterAccess().getCommaKeyword_2());
			}
		)?
	)
;

// Entry rule entryRuleMethodDecl
entryRuleMethodDecl returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMethodDeclRule()); }
	iv_ruleMethodDecl=ruleMethodDecl
	{ $current=$iv_ruleMethodDecl.current; }
	EOF;

// Rule MethodDecl
ruleMethodDecl returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getMethodDeclAccess().getDomainDomainEnumRuleCall_0_0());
				}
				lv_domain_0_0=ruleDomain
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMethodDeclRule());
					}
					set(
						$current,
						"domain",
						lv_domain_0_0,
						"edu.ustb.cmp.MiniJava.Domain");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getMethodDeclAccess().getExtraExtraAttrEnumRuleCall_1_0());
				}
				lv_extra_1_0=ruleExtraAttr
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMethodDeclRule());
					}
					set(
						$current,
						"extra",
						lv_extra_1_0,
						"edu.ustb.cmp.MiniJava.ExtraAttr");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getMethodDeclAccess().getRetTypeReturnTypeParserRuleCall_2_0());
				}
				lv_retType_2_0=ruleReturnType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMethodDeclRule());
					}
					set(
						$current,
						"retType",
						lv_retType_2_0,
						"edu.ustb.cmp.MiniJava.ReturnType");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				lv_name_3_0=RULE_ID
				{
					newLeafNode(lv_name_3_0, grammarAccess.getMethodDeclAccess().getNameIDTerminalRuleCall_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getMethodDeclRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_3_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_4='('
		{
			newLeafNode(otherlv_4, grammarAccess.getMethodDeclAccess().getLeftParenthesisKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getMethodDeclAccess().getParamsParameterParserRuleCall_5_0());
				}
				lv_params_5_0=ruleParameter
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMethodDeclRule());
					}
					add(
						$current,
						"params",
						lv_params_5_0,
						"edu.ustb.cmp.MiniJava.Parameter");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_6=')'
		{
			newLeafNode(otherlv_6, grammarAccess.getMethodDeclAccess().getRightParenthesisKeyword_6());
		}
		otherlv_7='{'
		{
			newLeafNode(otherlv_7, grammarAccess.getMethodDeclAccess().getLeftCurlyBracketKeyword_7());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getMethodDeclAccess().getStatementsStatementParserRuleCall_8_0());
				}
				lv_statements_8_0=ruleStatement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMethodDeclRule());
					}
					add(
						$current,
						"statements",
						lv_statements_8_0,
						"edu.ustb.cmp.MiniJava.Statement");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_9='}'
		{
			newLeafNode(otherlv_9, grammarAccess.getMethodDeclAccess().getRightCurlyBracketKeyword_9());
		}
	)
;

// Entry rule entryRuleMember
entryRuleMember returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMemberRule()); }
	iv_ruleMember=ruleMember
	{ $current=$iv_ruleMember.current; }
	EOF;

// Rule Member
ruleMember returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getMemberAccess().getVariableDeclParserRuleCall_0());
		}
		this_VariableDecl_0=ruleVariableDecl
		{
			$current = $this_VariableDecl_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getMemberAccess().getMethodDeclParserRuleCall_1());
		}
		this_MethodDecl_1=ruleMethodDecl
		{
			$current = $this_MethodDecl_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleStatement
entryRuleStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStatementRule()); }
	iv_ruleStatement=ruleStatement
	{ $current=$iv_ruleStatement.current; }
	EOF;

// Rule Statement
ruleStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getStatementAccess().getVarDefVariableDeclParserRuleCall_0_0());
				}
				lv_varDef_0_0=ruleVariableDecl
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getStatementRule());
					}
					set(
						$current,
						"varDef",
						lv_varDef_0_0,
						"edu.ustb.cmp.MiniJava.VariableDecl");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getStatementAccess().getAssignAssignmentsParserRuleCall_1_0());
				}
				lv_assign_1_0=ruleAssignments
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getStatementRule());
					}
					set(
						$current,
						"assign",
						lv_assign_1_0,
						"edu.ustb.cmp.MiniJava.Assignments");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getStatementAccess().getIfStatIfStatementsParserRuleCall_2_0());
				}
				lv_ifStat_2_0=ruleIfStatements
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getStatementRule());
					}
					set(
						$current,
						"ifStat",
						lv_ifStat_2_0,
						"edu.ustb.cmp.MiniJava.IfStatements");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getStatementAccess().getWhileStatWhileStatementsParserRuleCall_3_0());
				}
				lv_whileStat_3_0=ruleWhileStatements
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getStatementRule());
					}
					set(
						$current,
						"whileStat",
						lv_whileStat_3_0,
						"edu.ustb.cmp.MiniJava.WhileStatements");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getStatementAccess().getRetStatReturnStatementsParserRuleCall_4_0());
				}
				lv_retStat_4_0=ruleReturnStatements
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getStatementRule());
					}
					set(
						$current,
						"retStat",
						lv_retStat_4_0,
						"edu.ustb.cmp.MiniJava.ReturnStatements");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleLValueExp
entryRuleLValueExp returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLValueExpRule()); }
	iv_ruleLValueExp=ruleLValueExp
	{ $current=$iv_ruleLValueExp.current; }
	EOF;

// Rule LValueExp
ruleLValueExp returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_id_0_0=RULE_ID
				{
					newLeafNode(lv_id_0_0, grammarAccess.getLValueExpAccess().getIdIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getLValueExpRule());
					}
					setWithLastConsumed(
						$current,
						"id",
						lv_id_0_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		    |
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getLValueExpAccess().getExpExpressionParserRuleCall_1_0_0());
					}
					lv_exp_1_0=ruleExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getLValueExpRule());
						}
						set(
							$current,
							"exp",
							lv_exp_1_0,
							"edu.ustb.cmp.MiniJava.Expression");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_2='.'
			{
				newLeafNode(otherlv_2, grammarAccess.getLValueExpAccess().getFullStopKeyword_1_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getLValueExpAccess().getIdQualifiedNameParserRuleCall_1_2_0());
					}
					lv_id_3_0=ruleQualifiedName
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getLValueExpRule());
						}
						set(
							$current,
							"id",
							lv_id_3_0,
							"edu.ustb.cmp.MiniJava.QualifiedName");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getLValueExpAccess().getExpExpressionParserRuleCall_2_0_0());
					}
					lv_exp_4_0=ruleExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getLValueExpRule());
						}
						set(
							$current,
							"exp",
							lv_exp_4_0,
							"edu.ustb.cmp.MiniJava.Expression");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_5='['
			{
				newLeafNode(otherlv_5, grammarAccess.getLValueExpAccess().getLeftSquareBracketKeyword_2_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getLValueExpAccess().getIndexExpressionParserRuleCall_2_2_0());
					}
					lv_index_6_0=ruleExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getLValueExpRule());
						}
						set(
							$current,
							"index",
							lv_index_6_0,
							"edu.ustb.cmp.MiniJava.Expression");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_7=']'
			{
				newLeafNode(otherlv_7, grammarAccess.getLValueExpAccess().getRightSquareBracketKeyword_2_3());
			}
		)
	)
;

// Entry rule entryRuleAssignments
entryRuleAssignments returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAssignmentsRule()); }
	iv_ruleAssignments=ruleAssignments
	{ $current=$iv_ruleAssignments.current; }
	EOF;

// Rule Assignments
ruleAssignments returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getAssignmentsAccess().getLeftValueLValueExpParserRuleCall_0_0());
				}
				lv_leftValue_0_0=ruleLValueExp
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAssignmentsRule());
					}
					set(
						$current,
						"leftValue",
						lv_leftValue_0_0,
						"edu.ustb.cmp.MiniJava.LValueExp");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1='='
		{
			newLeafNode(otherlv_1, grammarAccess.getAssignmentsAccess().getEqualsSignKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getAssignmentsAccess().getExpressionExpressionParserRuleCall_2_0());
				}
				lv_expression_2_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAssignmentsRule());
					}
					set(
						$current,
						"expression",
						lv_expression_2_0,
						"edu.ustb.cmp.MiniJava.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3=';'
		{
			newLeafNode(otherlv_3, grammarAccess.getAssignmentsAccess().getSemicolonKeyword_3());
		}
	)
;

// Entry rule entryRuleIfStatements
entryRuleIfStatements returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getIfStatementsRule()); }
	iv_ruleIfStatements=ruleIfStatements
	{ $current=$iv_ruleIfStatements.current; }
	EOF;

// Rule IfStatements
ruleIfStatements returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='if'
		{
			newLeafNode(otherlv_0, grammarAccess.getIfStatementsAccess().getIfKeyword_0());
		}
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getIfStatementsAccess().getLeftParenthesisKeyword_1());
		}
		{
			newCompositeNode(grammarAccess.getIfStatementsAccess().getExpressionParserRuleCall_2());
		}
		this_Expression_2=ruleExpression
		{
			$current = $this_Expression_2.current;
			afterParserOrEnumRuleCall();
		}
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getIfStatementsAccess().getRightParenthesisKeyword_3());
		}
		otherlv_4='{'
		{
			newLeafNode(otherlv_4, grammarAccess.getIfStatementsAccess().getLeftCurlyBracketKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getIfStatementsAccess().getStatementsStatementParserRuleCall_5_0());
				}
				lv_statements_5_0=ruleStatement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getIfStatementsRule());
					}
					add(
						$current,
						"statements",
						lv_statements_5_0,
						"edu.ustb.cmp.MiniJava.Statement");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_6='}'
		{
			newLeafNode(otherlv_6, grammarAccess.getIfStatementsAccess().getRightCurlyBracketKeyword_6());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getIfStatementsAccess().getElseIfElseIfStatementsParserRuleCall_7_0());
				}
				lv_elseIf_7_0=ruleElseIfStatements
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getIfStatementsRule());
					}
					add(
						$current,
						"elseIf",
						lv_elseIf_7_0,
						"edu.ustb.cmp.MiniJava.ElseIfStatements");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			(
				{
					newCompositeNode(grammarAccess.getIfStatementsAccess().getElseElseStatementParserRuleCall_8_0());
				}
				lv_else_8_0=ruleElseStatement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getIfStatementsRule());
					}
					add(
						$current,
						"else",
						lv_else_8_0,
						"edu.ustb.cmp.MiniJava.ElseStatement");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleElseIfStatements
entryRuleElseIfStatements returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getElseIfStatementsRule()); }
	iv_ruleElseIfStatements=ruleElseIfStatements
	{ $current=$iv_ruleElseIfStatements.current; }
	EOF;

// Rule ElseIfStatements
ruleElseIfStatements returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='else'
		{
			newLeafNode(otherlv_0, grammarAccess.getElseIfStatementsAccess().getElseKeyword_0());
		}
		otherlv_1='if'
		{
			newLeafNode(otherlv_1, grammarAccess.getElseIfStatementsAccess().getIfKeyword_1());
		}
		otherlv_2='('
		{
			newLeafNode(otherlv_2, grammarAccess.getElseIfStatementsAccess().getLeftParenthesisKeyword_2());
		}
		{
			newCompositeNode(grammarAccess.getElseIfStatementsAccess().getExpressionParserRuleCall_3());
		}
		this_Expression_3=ruleExpression
		{
			$current = $this_Expression_3.current;
			afterParserOrEnumRuleCall();
		}
		otherlv_4=')'
		{
			newLeafNode(otherlv_4, grammarAccess.getElseIfStatementsAccess().getRightParenthesisKeyword_4());
		}
		otherlv_5='{'
		{
			newLeafNode(otherlv_5, grammarAccess.getElseIfStatementsAccess().getLeftCurlyBracketKeyword_5());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getElseIfStatementsAccess().getStatementsStatementParserRuleCall_6_0());
				}
				lv_statements_6_0=ruleStatement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getElseIfStatementsRule());
					}
					add(
						$current,
						"statements",
						lv_statements_6_0,
						"edu.ustb.cmp.MiniJava.Statement");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_7='}'
		{
			newLeafNode(otherlv_7, grammarAccess.getElseIfStatementsAccess().getRightCurlyBracketKeyword_7());
		}
	)
;

// Entry rule entryRuleElseStatement
entryRuleElseStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getElseStatementRule()); }
	iv_ruleElseStatement=ruleElseStatement
	{ $current=$iv_ruleElseStatement.current; }
	EOF;

// Rule ElseStatement
ruleElseStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getElseStatementAccess().getElseStatementAction_0(),
					$current);
			}
		)
		otherlv_1='else'
		{
			newLeafNode(otherlv_1, grammarAccess.getElseStatementAccess().getElseKeyword_1());
		}
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getElseStatementAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getElseStatementAccess().getStatementsStatementParserRuleCall_3_0());
				}
				lv_statements_3_0=ruleStatement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getElseStatementRule());
					}
					add(
						$current,
						"statements",
						lv_statements_3_0,
						"edu.ustb.cmp.MiniJava.Statement");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_4='}'
		{
			newLeafNode(otherlv_4, grammarAccess.getElseStatementAccess().getRightCurlyBracketKeyword_4());
		}
	)
;

// Entry rule entryRuleWhileStatements
entryRuleWhileStatements returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getWhileStatementsRule()); }
	iv_ruleWhileStatements=ruleWhileStatements
	{ $current=$iv_ruleWhileStatements.current; }
	EOF;

// Rule WhileStatements
ruleWhileStatements returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='while'
		{
			newLeafNode(otherlv_0, grammarAccess.getWhileStatementsAccess().getWhileKeyword_0());
		}
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getWhileStatementsAccess().getLeftParenthesisKeyword_1());
		}
		{
			newCompositeNode(grammarAccess.getWhileStatementsAccess().getExpressionParserRuleCall_2());
		}
		this_Expression_2=ruleExpression
		{
			$current = $this_Expression_2.current;
			afterParserOrEnumRuleCall();
		}
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getWhileStatementsAccess().getRightParenthesisKeyword_3());
		}
		otherlv_4='{'
		{
			newLeafNode(otherlv_4, grammarAccess.getWhileStatementsAccess().getLeftCurlyBracketKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getWhileStatementsAccess().getStatementsStatementParserRuleCall_5_0());
				}
				lv_statements_5_0=ruleStatement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getWhileStatementsRule());
					}
					add(
						$current,
						"statements",
						lv_statements_5_0,
						"edu.ustb.cmp.MiniJava.Statement");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_6='}'
		{
			newLeafNode(otherlv_6, grammarAccess.getWhileStatementsAccess().getRightCurlyBracketKeyword_6());
		}
	)
;

// Entry rule entryRuleReturnStatements
entryRuleReturnStatements returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getReturnStatementsRule()); }
	iv_ruleReturnStatements=ruleReturnStatements
	{ $current=$iv_ruleReturnStatements.current; }
	EOF;

// Rule ReturnStatements
ruleReturnStatements returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='return'
		{
			newLeafNode(otherlv_0, grammarAccess.getReturnStatementsAccess().getReturnKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getReturnStatementsAccess().getExpExpressionParserRuleCall_1_0());
				}
				lv_exp_1_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getReturnStatementsRule());
					}
					set(
						$current,
						"exp",
						lv_exp_1_0,
						"edu.ustb.cmp.MiniJava.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2=';'
		{
			newLeafNode(otherlv_2, grammarAccess.getReturnStatementsAccess().getSemicolonKeyword_2());
		}
	)
;

// Entry rule entryRuleOperator
entryRuleOperator returns [String current=null]:
	{ newCompositeNode(grammarAccess.getOperatorRule()); }
	iv_ruleOperator=ruleOperator
	{ $current=$iv_ruleOperator.current.getText(); }
	EOF;

// Rule Operator
ruleOperator returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='!'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getOperatorAccess().getExclamationMarkKeyword_0());
		}
		    |
		kw='&'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getOperatorAccess().getAmpersandKeyword_1());
		}
		    |
		kw='|'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getOperatorAccess().getVerticalLineKeyword_2());
		}
		    |
		kw='+'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getOperatorAccess().getPlusSignKeyword_3());
		}
		    |
		kw='-'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getOperatorAccess().getHyphenMinusKeyword_4());
		}
		    |
		kw='*'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getOperatorAccess().getAsteriskKeyword_5());
		}
		    |
		kw='%'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getOperatorAccess().getPercentSignKeyword_6());
		}
		    |
		kw='<<'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getOperatorAccess().getLessThanSignLessThanSignKeyword_7());
		}
		    |
		kw='>>'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getOperatorAccess().getGreaterThanSignGreaterThanSignKeyword_8());
		}
		    |
		kw='=='
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getOperatorAccess().getEqualsSignEqualsSignKeyword_9());
		}
		    |
		kw='!='
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getOperatorAccess().getExclamationMarkEqualsSignKeyword_10());
		}
		    |
		kw='>='
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getOperatorAccess().getGreaterThanSignEqualsSignKeyword_11());
		}
		    |
		kw='<='
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getOperatorAccess().getLessThanSignEqualsSignKeyword_12());
		}
		    |
		kw='>'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getOperatorAccess().getGreaterThanSignKeyword_13());
		}
		    |
		kw='<'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getOperatorAccess().getLessThanSignKeyword_14());
		}
	)
;

// Entry rule entryRuleCalcExp
entryRuleCalcExp returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCalcExpRule()); }
	iv_ruleCalcExp=ruleCalcExp
	{ $current=$iv_ruleCalcExp.current; }
	EOF;

// Rule CalcExp
ruleCalcExp returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_leftName_0_0=RULE_ID
				{
					newLeafNode(lv_leftName_0_0, grammarAccess.getCalcExpAccess().getLeftNameIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getCalcExpRule());
					}
					setWithLastConsumed(
						$current,
						"leftName",
						lv_leftName_0_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		    |
		(
			(
				(
					lv_leftNum_1_0=RULE_INT
					{
						newLeafNode(lv_leftNum_1_0, grammarAccess.getCalcExpAccess().getLeftNumINTTerminalRuleCall_1_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getCalcExpRule());
						}
						setWithLastConsumed(
							$current,
							"leftNum",
							lv_leftNum_1_0,
							"org.eclipse.xtext.common.Terminals.INT");
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getCalcExpAccess().getOpOperatorParserRuleCall_1_1_0());
					}
					lv_op_2_0=ruleOperator
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getCalcExpRule());
						}
						set(
							$current,
							"op",
							lv_op_2_0,
							"edu.ustb.cmp.MiniJava.Operator");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					lv_rightName_3_0=RULE_ID
					{
						newLeafNode(lv_rightName_3_0, grammarAccess.getCalcExpAccess().getRightNameIDTerminalRuleCall_1_2_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getCalcExpRule());
						}
						setWithLastConsumed(
							$current,
							"rightName",
							lv_rightName_3_0,
							"org.eclipse.xtext.common.Terminals.ID");
					}
				)
			)
		)
		    |
		(
			(
				lv_rightNum_4_0=RULE_INT
				{
					newLeafNode(lv_rightNum_4_0, grammarAccess.getCalcExpAccess().getRightNumINTTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getCalcExpRule());
					}
					setWithLastConsumed(
						$current,
						"rightNum",
						lv_rightNum_4_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
	)
;

// Entry rule entryRuleCompareExp
entryRuleCompareExp returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCompareExpRule()); }
	iv_ruleCompareExp=ruleCompareExp
	{ $current=$iv_ruleCompareExp.current; }
	EOF;

// Rule CompareExp
ruleCompareExp returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getCompareExpAccess().getIdQualifiedNameParserRuleCall_0_0());
				}
				lv_id_0_0=ruleQualifiedName
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCompareExpRule());
					}
					set(
						$current,
						"id",
						lv_id_0_0,
						"edu.ustb.cmp.MiniJava.QualifiedName");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getCompareExpAccess().getOpOperatorParserRuleCall_1_0());
				}
				lv_op_1_0=ruleOperator
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCompareExpRule());
					}
					set(
						$current,
						"op",
						lv_op_1_0,
						"edu.ustb.cmp.MiniJava.Operator");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				lv_other1_2_0=RULE_ID
				{
					newLeafNode(lv_other1_2_0, grammarAccess.getCompareExpAccess().getOther1IDTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getCompareExpRule());
					}
					addWithLastConsumed(
						$current,
						"other1",
						lv_other1_2_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)*
		(
			(
				lv_other2_3_0='null'
				{
					newLeafNode(lv_other2_3_0, grammarAccess.getCompareExpAccess().getOther2NullKeyword_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getCompareExpRule());
					}
					addWithLastConsumed($current, "other2", lv_other2_3_0, "null");
				}
			)
		)*
	)
;

// Entry rule entryRuleBasicJudge
entryRuleBasicJudge returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBasicJudgeRule()); }
	iv_ruleBasicJudge=ruleBasicJudge
	{ $current=$iv_ruleBasicJudge.current; }
	EOF;

// Rule BasicJudge
ruleBasicJudge returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getBasicJudgeAccess().getBEBooleanExpEnumRuleCall_0_0());
				}
				lv_bE_0_0=ruleBooleanExp
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBasicJudgeRule());
					}
					set(
						$current,
						"bE",
						lv_bE_0_0,
						"edu.ustb.cmp.MiniJava.BooleanExp");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getBasicJudgeAccess().getCmpCompareExpParserRuleCall_1_0());
				}
				lv_cmp_1_0=ruleCompareExp
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBasicJudgeRule());
					}
					set(
						$current,
						"cmp",
						lv_cmp_1_0,
						"edu.ustb.cmp.MiniJava.CompareExp");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleJudgeExp
entryRuleJudgeExp returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getJudgeExpRule()); }
	iv_ruleJudgeExp=ruleJudgeExp
	{ $current=$iv_ruleJudgeExp.current; }
	EOF;

// Rule JudgeExp
ruleJudgeExp returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0='!'
			{
				newLeafNode(otherlv_0, grammarAccess.getJudgeExpAccess().getExclamationMarkKeyword_0());
			}
		)*
		(
			otherlv_1='('
			{
				newLeafNode(otherlv_1, grammarAccess.getJudgeExpAccess().getLeftParenthesisKeyword_1());
			}
		)*
		(
			(
				{
					newCompositeNode(grammarAccess.getJudgeExpAccess().getBjBasicJudgeParserRuleCall_2_0());
				}
				lv_bj_2_0=ruleBasicJudge
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getJudgeExpRule());
					}
					set(
						$current,
						"bj",
						lv_bj_2_0,
						"edu.ustb.cmp.MiniJava.BasicJudge");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_3=')'
			{
				newLeafNode(otherlv_3, grammarAccess.getJudgeExpAccess().getRightParenthesisKeyword_3());
			}
		)*
	)
;

// Entry rule entryRuleNewExp
entryRuleNewExp returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNewExpRule()); }
	iv_ruleNewExp=ruleNewExp
	{ $current=$iv_ruleNewExp.current; }
	EOF;

// Rule NewExp
ruleNewExp returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='new'
		{
			newLeafNode(otherlv_0, grammarAccess.getNewExpAccess().getNewKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getNewExpAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getNewExpRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2='('
		{
			newLeafNode(otherlv_2, grammarAccess.getNewExpAccess().getLeftParenthesisKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getNewExpAccess().getParamsParameterParserRuleCall_3_0());
				}
				lv_params_3_0=ruleParameter
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getNewExpRule());
					}
					add(
						$current,
						"params",
						lv_params_3_0,
						"edu.ustb.cmp.MiniJava.Parameter");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_4=')'
		{
			newLeafNode(otherlv_4, grammarAccess.getNewExpAccess().getRightParenthesisKeyword_4());
		}
	)
;

// Entry rule entryRuleExpression
entryRuleExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExpressionRule()); }
	iv_ruleExpression=ruleExpression
	{ $current=$iv_ruleExpression.current; }
	EOF;

// Rule Expression
ruleExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getExpressionAccess().getConstConstantValueParserRuleCall_0_0());
				}
				lv_const_0_0=ruleConstantValue
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExpressionRule());
					}
					set(
						$current,
						"const",
						lv_const_0_0,
						"edu.ustb.cmp.MiniJava.ConstantValue");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getExpressionAccess().getCeCalcExpParserRuleCall_1_0());
				}
				lv_ce_1_0=ruleCalcExp
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExpressionRule());
					}
					set(
						$current,
						"ce",
						lv_ce_1_0,
						"edu.ustb.cmp.MiniJava.CalcExp");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getExpressionAccess().getJeJudgeExpParserRuleCall_2_0());
				}
				lv_je_2_0=ruleJudgeExp
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExpressionRule());
					}
					set(
						$current,
						"je",
						lv_je_2_0,
						"edu.ustb.cmp.MiniJava.JudgeExp");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getExpressionAccess().getNeNewExpParserRuleCall_3_0());
				}
				lv_ne_3_0=ruleNewExp
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExpressionRule());
					}
					set(
						$current,
						"ne",
						lv_ne_3_0,
						"edu.ustb.cmp.MiniJava.NewExp");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Rule Domain
ruleDomain returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='public'
			{
				$current = grammarAccess.getDomainAccess().getPUBLICEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getDomainAccess().getPUBLICEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='private'
			{
				$current = grammarAccess.getDomainAccess().getPRIVATEEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getDomainAccess().getPRIVATEEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='protected'
			{
				$current = grammarAccess.getDomainAccess().getPROTECTEDEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getDomainAccess().getPROTECTEDEnumLiteralDeclaration_2());
			}
		)
	)
;

// Rule ExtraAttr
ruleExtraAttr returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='static'
			{
				$current = grammarAccess.getExtraAttrAccess().getSTATICEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getExtraAttrAccess().getSTATICEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='abstract'
			{
				$current = grammarAccess.getExtraAttrAccess().getABSTRACTEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getExtraAttrAccess().getABSTRACTEnumLiteralDeclaration_1());
			}
		)
	)
;

// Rule BooleanExp
ruleBooleanExp returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='true'
			{
				$current = grammarAccess.getBooleanExpAccess().getTRUEEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getBooleanExpAccess().getTRUEEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='false'
			{
				$current = grammarAccess.getBooleanExpAccess().getFALSEEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getBooleanExpAccess().getFALSEEnumLiteralDeclaration_1());
			}
		)
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;

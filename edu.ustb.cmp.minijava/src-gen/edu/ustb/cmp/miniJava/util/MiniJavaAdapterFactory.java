/**
 * generated by Xtext 2.25.0
 */
package edu.ustb.cmp.miniJava.util;

import edu.ustb.cmp.miniJava.*;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.common.notify.impl.AdapterFactoryImpl;

import org.eclipse.emf.ecore.EObject;

/**
 * <!-- begin-user-doc -->
 * The <b>Adapter Factory</b> for the model.
 * It provides an adapter <code>createXXX</code> method for each class of the model.
 * <!-- end-user-doc -->
 * @see edu.ustb.cmp.miniJava.MiniJavaPackage
 * @generated
 */
public class MiniJavaAdapterFactory extends AdapterFactoryImpl
{
  /**
   * The cached model package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static MiniJavaPackage modelPackage;

  /**
   * Creates an instance of the adapter factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public MiniJavaAdapterFactory()
  {
    if (modelPackage == null)
    {
      modelPackage = MiniJavaPackage.eINSTANCE;
    }
  }

  /**
   * Returns whether this factory is applicable for the type of the object.
   * <!-- begin-user-doc -->
   * This implementation returns <code>true</code> if the object is either the model's package or is an instance object of the model.
   * <!-- end-user-doc -->
   * @return whether this factory is applicable for the type of the object.
   * @generated
   */
  @Override
  public boolean isFactoryForType(Object object)
  {
    if (object == modelPackage)
    {
      return true;
    }
    if (object instanceof EObject)
    {
      return ((EObject)object).eClass().getEPackage() == modelPackage;
    }
    return false;
  }

  /**
   * The switch that delegates to the <code>createXXX</code> methods.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected MiniJavaSwitch<Adapter> modelSwitch =
    new MiniJavaSwitch<Adapter>()
    {
      @Override
      public Adapter caseMiniJava(MiniJava object)
      {
        return createMiniJavaAdapter();
      }
      @Override
      public Adapter casePackageDecl(PackageDecl object)
      {
        return createPackageDeclAdapter();
      }
      @Override
      public Adapter caseImportDecl(ImportDecl object)
      {
        return createImportDeclAdapter();
      }
      @Override
      public Adapter caseMainClassDecl(MainClassDecl object)
      {
        return createMainClassDeclAdapter();
      }
      @Override
      public Adapter caseClassDecl(ClassDecl object)
      {
        return createClassDeclAdapter();
      }
      @Override
      public Adapter caseVariableDecl(VariableDecl object)
      {
        return createVariableDeclAdapter();
      }
      @Override
      public Adapter caseParameter(Parameter object)
      {
        return createParameterAdapter();
      }
      @Override
      public Adapter caseMethodDecl(MethodDecl object)
      {
        return createMethodDeclAdapter();
      }
      @Override
      public Adapter caseMember(Member object)
      {
        return createMemberAdapter();
      }
      @Override
      public Adapter caseStatement(Statement object)
      {
        return createStatementAdapter();
      }
      @Override
      public Adapter caseLValueExp(LValueExp object)
      {
        return createLValueExpAdapter();
      }
      @Override
      public Adapter caseAssignments(Assignments object)
      {
        return createAssignmentsAdapter();
      }
      @Override
      public Adapter caseIfStatements(IfStatements object)
      {
        return createIfStatementsAdapter();
      }
      @Override
      public Adapter caseElseIfStatements(ElseIfStatements object)
      {
        return createElseIfStatementsAdapter();
      }
      @Override
      public Adapter caseElseStatement(ElseStatement object)
      {
        return createElseStatementAdapter();
      }
      @Override
      public Adapter caseWhileStatements(WhileStatements object)
      {
        return createWhileStatementsAdapter();
      }
      @Override
      public Adapter caseReturnStatements(ReturnStatements object)
      {
        return createReturnStatementsAdapter();
      }
      @Override
      public Adapter caseCalcExp(CalcExp object)
      {
        return createCalcExpAdapter();
      }
      @Override
      public Adapter caseCompareExp(CompareExp object)
      {
        return createCompareExpAdapter();
      }
      @Override
      public Adapter caseBasicJudge(BasicJudge object)
      {
        return createBasicJudgeAdapter();
      }
      @Override
      public Adapter caseJudgeExp(JudgeExp object)
      {
        return createJudgeExpAdapter();
      }
      @Override
      public Adapter caseNewExp(NewExp object)
      {
        return createNewExpAdapter();
      }
      @Override
      public Adapter caseExpression(Expression object)
      {
        return createExpressionAdapter();
      }
      @Override
      public Adapter defaultCase(EObject object)
      {
        return createEObjectAdapter();
      }
    };

  /**
   * Creates an adapter for the <code>target</code>.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param target the object to adapt.
   * @return the adapter for the <code>target</code>.
   * @generated
   */
  @Override
  public Adapter createAdapter(Notifier target)
  {
    return modelSwitch.doSwitch((EObject)target);
  }


  /**
   * Creates a new adapter for an object of class '{@link edu.ustb.cmp.miniJava.MiniJava <em>Mini Java</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see edu.ustb.cmp.miniJava.MiniJava
   * @generated
   */
  public Adapter createMiniJavaAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link edu.ustb.cmp.miniJava.PackageDecl <em>Package Decl</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see edu.ustb.cmp.miniJava.PackageDecl
   * @generated
   */
  public Adapter createPackageDeclAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link edu.ustb.cmp.miniJava.ImportDecl <em>Import Decl</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see edu.ustb.cmp.miniJava.ImportDecl
   * @generated
   */
  public Adapter createImportDeclAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link edu.ustb.cmp.miniJava.MainClassDecl <em>Main Class Decl</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see edu.ustb.cmp.miniJava.MainClassDecl
   * @generated
   */
  public Adapter createMainClassDeclAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link edu.ustb.cmp.miniJava.ClassDecl <em>Class Decl</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see edu.ustb.cmp.miniJava.ClassDecl
   * @generated
   */
  public Adapter createClassDeclAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link edu.ustb.cmp.miniJava.VariableDecl <em>Variable Decl</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see edu.ustb.cmp.miniJava.VariableDecl
   * @generated
   */
  public Adapter createVariableDeclAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link edu.ustb.cmp.miniJava.Parameter <em>Parameter</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see edu.ustb.cmp.miniJava.Parameter
   * @generated
   */
  public Adapter createParameterAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link edu.ustb.cmp.miniJava.MethodDecl <em>Method Decl</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see edu.ustb.cmp.miniJava.MethodDecl
   * @generated
   */
  public Adapter createMethodDeclAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link edu.ustb.cmp.miniJava.Member <em>Member</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see edu.ustb.cmp.miniJava.Member
   * @generated
   */
  public Adapter createMemberAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link edu.ustb.cmp.miniJava.Statement <em>Statement</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see edu.ustb.cmp.miniJava.Statement
   * @generated
   */
  public Adapter createStatementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link edu.ustb.cmp.miniJava.LValueExp <em>LValue Exp</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see edu.ustb.cmp.miniJava.LValueExp
   * @generated
   */
  public Adapter createLValueExpAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link edu.ustb.cmp.miniJava.Assignments <em>Assignments</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see edu.ustb.cmp.miniJava.Assignments
   * @generated
   */
  public Adapter createAssignmentsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link edu.ustb.cmp.miniJava.IfStatements <em>If Statements</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see edu.ustb.cmp.miniJava.IfStatements
   * @generated
   */
  public Adapter createIfStatementsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link edu.ustb.cmp.miniJava.ElseIfStatements <em>Else If Statements</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see edu.ustb.cmp.miniJava.ElseIfStatements
   * @generated
   */
  public Adapter createElseIfStatementsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link edu.ustb.cmp.miniJava.ElseStatement <em>Else Statement</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see edu.ustb.cmp.miniJava.ElseStatement
   * @generated
   */
  public Adapter createElseStatementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link edu.ustb.cmp.miniJava.WhileStatements <em>While Statements</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see edu.ustb.cmp.miniJava.WhileStatements
   * @generated
   */
  public Adapter createWhileStatementsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link edu.ustb.cmp.miniJava.ReturnStatements <em>Return Statements</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see edu.ustb.cmp.miniJava.ReturnStatements
   * @generated
   */
  public Adapter createReturnStatementsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link edu.ustb.cmp.miniJava.CalcExp <em>Calc Exp</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see edu.ustb.cmp.miniJava.CalcExp
   * @generated
   */
  public Adapter createCalcExpAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link edu.ustb.cmp.miniJava.CompareExp <em>Compare Exp</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see edu.ustb.cmp.miniJava.CompareExp
   * @generated
   */
  public Adapter createCompareExpAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link edu.ustb.cmp.miniJava.BasicJudge <em>Basic Judge</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see edu.ustb.cmp.miniJava.BasicJudge
   * @generated
   */
  public Adapter createBasicJudgeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link edu.ustb.cmp.miniJava.JudgeExp <em>Judge Exp</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see edu.ustb.cmp.miniJava.JudgeExp
   * @generated
   */
  public Adapter createJudgeExpAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link edu.ustb.cmp.miniJava.NewExp <em>New Exp</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see edu.ustb.cmp.miniJava.NewExp
   * @generated
   */
  public Adapter createNewExpAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link edu.ustb.cmp.miniJava.Expression <em>Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see edu.ustb.cmp.miniJava.Expression
   * @generated
   */
  public Adapter createExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for the default case.
   * <!-- begin-user-doc -->
   * This default implementation returns null.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @generated
   */
  public Adapter createEObjectAdapter()
  {
    return null;
  }

} //MiniJavaAdapterFactory

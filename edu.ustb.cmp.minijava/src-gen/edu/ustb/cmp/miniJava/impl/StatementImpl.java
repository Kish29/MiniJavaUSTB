/**
 * generated by Xtext 2.25.0
 */
package edu.ustb.cmp.miniJava.impl;

import edu.ustb.cmp.miniJava.Assignments;
import edu.ustb.cmp.miniJava.IfStatements;
import edu.ustb.cmp.miniJava.MiniJavaPackage;
import edu.ustb.cmp.miniJava.ReturnStatements;
import edu.ustb.cmp.miniJava.Statement;
import edu.ustb.cmp.miniJava.VariableDecl;
import edu.ustb.cmp.miniJava.WhileStatements;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Statement</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link edu.ustb.cmp.miniJava.impl.StatementImpl#getVarDef <em>Var Def</em>}</li>
 *   <li>{@link edu.ustb.cmp.miniJava.impl.StatementImpl#getAssign <em>Assign</em>}</li>
 *   <li>{@link edu.ustb.cmp.miniJava.impl.StatementImpl#getIfStat <em>If Stat</em>}</li>
 *   <li>{@link edu.ustb.cmp.miniJava.impl.StatementImpl#getWhileStat <em>While Stat</em>}</li>
 *   <li>{@link edu.ustb.cmp.miniJava.impl.StatementImpl#getRetStat <em>Ret Stat</em>}</li>
 * </ul>
 *
 * @generated
 */
public class StatementImpl extends MinimalEObjectImpl.Container implements Statement
{
  /**
   * The cached value of the '{@link #getVarDef() <em>Var Def</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getVarDef()
   * @generated
   * @ordered
   */
  protected VariableDecl varDef;

  /**
   * The cached value of the '{@link #getAssign() <em>Assign</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAssign()
   * @generated
   * @ordered
   */
  protected Assignments assign;

  /**
   * The cached value of the '{@link #getIfStat() <em>If Stat</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getIfStat()
   * @generated
   * @ordered
   */
  protected IfStatements ifStat;

  /**
   * The cached value of the '{@link #getWhileStat() <em>While Stat</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getWhileStat()
   * @generated
   * @ordered
   */
  protected WhileStatements whileStat;

  /**
   * The cached value of the '{@link #getRetStat() <em>Ret Stat</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRetStat()
   * @generated
   * @ordered
   */
  protected ReturnStatements retStat;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected StatementImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return MiniJavaPackage.Literals.STATEMENT;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public VariableDecl getVarDef()
  {
    return varDef;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetVarDef(VariableDecl newVarDef, NotificationChain msgs)
  {
    VariableDecl oldVarDef = varDef;
    varDef = newVarDef;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MiniJavaPackage.STATEMENT__VAR_DEF, oldVarDef, newVarDef);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setVarDef(VariableDecl newVarDef)
  {
    if (newVarDef != varDef)
    {
      NotificationChain msgs = null;
      if (varDef != null)
        msgs = ((InternalEObject)varDef).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MiniJavaPackage.STATEMENT__VAR_DEF, null, msgs);
      if (newVarDef != null)
        msgs = ((InternalEObject)newVarDef).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MiniJavaPackage.STATEMENT__VAR_DEF, null, msgs);
      msgs = basicSetVarDef(newVarDef, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MiniJavaPackage.STATEMENT__VAR_DEF, newVarDef, newVarDef));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Assignments getAssign()
  {
    return assign;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetAssign(Assignments newAssign, NotificationChain msgs)
  {
    Assignments oldAssign = assign;
    assign = newAssign;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MiniJavaPackage.STATEMENT__ASSIGN, oldAssign, newAssign);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setAssign(Assignments newAssign)
  {
    if (newAssign != assign)
    {
      NotificationChain msgs = null;
      if (assign != null)
        msgs = ((InternalEObject)assign).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MiniJavaPackage.STATEMENT__ASSIGN, null, msgs);
      if (newAssign != null)
        msgs = ((InternalEObject)newAssign).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MiniJavaPackage.STATEMENT__ASSIGN, null, msgs);
      msgs = basicSetAssign(newAssign, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MiniJavaPackage.STATEMENT__ASSIGN, newAssign, newAssign));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public IfStatements getIfStat()
  {
    return ifStat;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetIfStat(IfStatements newIfStat, NotificationChain msgs)
  {
    IfStatements oldIfStat = ifStat;
    ifStat = newIfStat;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MiniJavaPackage.STATEMENT__IF_STAT, oldIfStat, newIfStat);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setIfStat(IfStatements newIfStat)
  {
    if (newIfStat != ifStat)
    {
      NotificationChain msgs = null;
      if (ifStat != null)
        msgs = ((InternalEObject)ifStat).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MiniJavaPackage.STATEMENT__IF_STAT, null, msgs);
      if (newIfStat != null)
        msgs = ((InternalEObject)newIfStat).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MiniJavaPackage.STATEMENT__IF_STAT, null, msgs);
      msgs = basicSetIfStat(newIfStat, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MiniJavaPackage.STATEMENT__IF_STAT, newIfStat, newIfStat));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public WhileStatements getWhileStat()
  {
    return whileStat;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetWhileStat(WhileStatements newWhileStat, NotificationChain msgs)
  {
    WhileStatements oldWhileStat = whileStat;
    whileStat = newWhileStat;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MiniJavaPackage.STATEMENT__WHILE_STAT, oldWhileStat, newWhileStat);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setWhileStat(WhileStatements newWhileStat)
  {
    if (newWhileStat != whileStat)
    {
      NotificationChain msgs = null;
      if (whileStat != null)
        msgs = ((InternalEObject)whileStat).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MiniJavaPackage.STATEMENT__WHILE_STAT, null, msgs);
      if (newWhileStat != null)
        msgs = ((InternalEObject)newWhileStat).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MiniJavaPackage.STATEMENT__WHILE_STAT, null, msgs);
      msgs = basicSetWhileStat(newWhileStat, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MiniJavaPackage.STATEMENT__WHILE_STAT, newWhileStat, newWhileStat));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ReturnStatements getRetStat()
  {
    return retStat;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetRetStat(ReturnStatements newRetStat, NotificationChain msgs)
  {
    ReturnStatements oldRetStat = retStat;
    retStat = newRetStat;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MiniJavaPackage.STATEMENT__RET_STAT, oldRetStat, newRetStat);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setRetStat(ReturnStatements newRetStat)
  {
    if (newRetStat != retStat)
    {
      NotificationChain msgs = null;
      if (retStat != null)
        msgs = ((InternalEObject)retStat).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MiniJavaPackage.STATEMENT__RET_STAT, null, msgs);
      if (newRetStat != null)
        msgs = ((InternalEObject)newRetStat).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MiniJavaPackage.STATEMENT__RET_STAT, null, msgs);
      msgs = basicSetRetStat(newRetStat, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MiniJavaPackage.STATEMENT__RET_STAT, newRetStat, newRetStat));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case MiniJavaPackage.STATEMENT__VAR_DEF:
        return basicSetVarDef(null, msgs);
      case MiniJavaPackage.STATEMENT__ASSIGN:
        return basicSetAssign(null, msgs);
      case MiniJavaPackage.STATEMENT__IF_STAT:
        return basicSetIfStat(null, msgs);
      case MiniJavaPackage.STATEMENT__WHILE_STAT:
        return basicSetWhileStat(null, msgs);
      case MiniJavaPackage.STATEMENT__RET_STAT:
        return basicSetRetStat(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case MiniJavaPackage.STATEMENT__VAR_DEF:
        return getVarDef();
      case MiniJavaPackage.STATEMENT__ASSIGN:
        return getAssign();
      case MiniJavaPackage.STATEMENT__IF_STAT:
        return getIfStat();
      case MiniJavaPackage.STATEMENT__WHILE_STAT:
        return getWhileStat();
      case MiniJavaPackage.STATEMENT__RET_STAT:
        return getRetStat();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case MiniJavaPackage.STATEMENT__VAR_DEF:
        setVarDef((VariableDecl)newValue);
        return;
      case MiniJavaPackage.STATEMENT__ASSIGN:
        setAssign((Assignments)newValue);
        return;
      case MiniJavaPackage.STATEMENT__IF_STAT:
        setIfStat((IfStatements)newValue);
        return;
      case MiniJavaPackage.STATEMENT__WHILE_STAT:
        setWhileStat((WhileStatements)newValue);
        return;
      case MiniJavaPackage.STATEMENT__RET_STAT:
        setRetStat((ReturnStatements)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case MiniJavaPackage.STATEMENT__VAR_DEF:
        setVarDef((VariableDecl)null);
        return;
      case MiniJavaPackage.STATEMENT__ASSIGN:
        setAssign((Assignments)null);
        return;
      case MiniJavaPackage.STATEMENT__IF_STAT:
        setIfStat((IfStatements)null);
        return;
      case MiniJavaPackage.STATEMENT__WHILE_STAT:
        setWhileStat((WhileStatements)null);
        return;
      case MiniJavaPackage.STATEMENT__RET_STAT:
        setRetStat((ReturnStatements)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case MiniJavaPackage.STATEMENT__VAR_DEF:
        return varDef != null;
      case MiniJavaPackage.STATEMENT__ASSIGN:
        return assign != null;
      case MiniJavaPackage.STATEMENT__IF_STAT:
        return ifStat != null;
      case MiniJavaPackage.STATEMENT__WHILE_STAT:
        return whileStat != null;
      case MiniJavaPackage.STATEMENT__RET_STAT:
        return retStat != null;
    }
    return super.eIsSet(featureID);
  }

} //StatementImpl

/**
 * generated by Xtext 2.25.0
 */
package edu.ustb.cmp.miniJava.impl;

import edu.ustb.cmp.miniJava.CompareExp;
import edu.ustb.cmp.miniJava.MiniJavaPackage;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EDataTypeEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Compare Exp</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link edu.ustb.cmp.miniJava.impl.CompareExpImpl#getId <em>Id</em>}</li>
 *   <li>{@link edu.ustb.cmp.miniJava.impl.CompareExpImpl#getOp <em>Op</em>}</li>
 *   <li>{@link edu.ustb.cmp.miniJava.impl.CompareExpImpl#getOther1 <em>Other1</em>}</li>
 *   <li>{@link edu.ustb.cmp.miniJava.impl.CompareExpImpl#getOther2 <em>Other2</em>}</li>
 * </ul>
 *
 * @generated
 */
public class CompareExpImpl extends MinimalEObjectImpl.Container implements CompareExp
{
  /**
   * The default value of the '{@link #getId() <em>Id</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getId()
   * @generated
   * @ordered
   */
  protected static final String ID_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getId() <em>Id</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getId()
   * @generated
   * @ordered
   */
  protected String id = ID_EDEFAULT;

  /**
   * The default value of the '{@link #getOp() <em>Op</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOp()
   * @generated
   * @ordered
   */
  protected static final String OP_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getOp() <em>Op</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOp()
   * @generated
   * @ordered
   */
  protected String op = OP_EDEFAULT;

  /**
   * The cached value of the '{@link #getOther1() <em>Other1</em>}' attribute list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOther1()
   * @generated
   * @ordered
   */
  protected EList<String> other1;

  /**
   * The cached value of the '{@link #getOther2() <em>Other2</em>}' attribute list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOther2()
   * @generated
   * @ordered
   */
  protected EList<String> other2;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected CompareExpImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return MiniJavaPackage.Literals.COMPARE_EXP;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getId()
  {
    return id;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setId(String newId)
  {
    String oldId = id;
    id = newId;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MiniJavaPackage.COMPARE_EXP__ID, oldId, id));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getOp()
  {
    return op;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setOp(String newOp)
  {
    String oldOp = op;
    op = newOp;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MiniJavaPackage.COMPARE_EXP__OP, oldOp, op));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<String> getOther1()
  {
    if (other1 == null)
    {
      other1 = new EDataTypeEList<String>(String.class, this, MiniJavaPackage.COMPARE_EXP__OTHER1);
    }
    return other1;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<String> getOther2()
  {
    if (other2 == null)
    {
      other2 = new EDataTypeEList<String>(String.class, this, MiniJavaPackage.COMPARE_EXP__OTHER2);
    }
    return other2;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case MiniJavaPackage.COMPARE_EXP__ID:
        return getId();
      case MiniJavaPackage.COMPARE_EXP__OP:
        return getOp();
      case MiniJavaPackage.COMPARE_EXP__OTHER1:
        return getOther1();
      case MiniJavaPackage.COMPARE_EXP__OTHER2:
        return getOther2();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case MiniJavaPackage.COMPARE_EXP__ID:
        setId((String)newValue);
        return;
      case MiniJavaPackage.COMPARE_EXP__OP:
        setOp((String)newValue);
        return;
      case MiniJavaPackage.COMPARE_EXP__OTHER1:
        getOther1().clear();
        getOther1().addAll((Collection<? extends String>)newValue);
        return;
      case MiniJavaPackage.COMPARE_EXP__OTHER2:
        getOther2().clear();
        getOther2().addAll((Collection<? extends String>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case MiniJavaPackage.COMPARE_EXP__ID:
        setId(ID_EDEFAULT);
        return;
      case MiniJavaPackage.COMPARE_EXP__OP:
        setOp(OP_EDEFAULT);
        return;
      case MiniJavaPackage.COMPARE_EXP__OTHER1:
        getOther1().clear();
        return;
      case MiniJavaPackage.COMPARE_EXP__OTHER2:
        getOther2().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case MiniJavaPackage.COMPARE_EXP__ID:
        return ID_EDEFAULT == null ? id != null : !ID_EDEFAULT.equals(id);
      case MiniJavaPackage.COMPARE_EXP__OP:
        return OP_EDEFAULT == null ? op != null : !OP_EDEFAULT.equals(op);
      case MiniJavaPackage.COMPARE_EXP__OTHER1:
        return other1 != null && !other1.isEmpty();
      case MiniJavaPackage.COMPARE_EXP__OTHER2:
        return other2 != null && !other2.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (id: ");
    result.append(id);
    result.append(", op: ");
    result.append(op);
    result.append(", other1: ");
    result.append(other1);
    result.append(", other2: ");
    result.append(other2);
    result.append(')');
    return result.toString();
  }

} //CompareExpImpl

/**
 * generated by Xtext 2.25.0
 */
package edu.ustb.cmp.miniJava.impl;

import edu.ustb.cmp.miniJava.ClassDecl;
import edu.ustb.cmp.miniJava.ImportDecl;
import edu.ustb.cmp.miniJava.MainClassDecl;
import edu.ustb.cmp.miniJava.MiniJava;
import edu.ustb.cmp.miniJava.MiniJavaPackage;
import edu.ustb.cmp.miniJava.PackageDecl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Mini Java</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link edu.ustb.cmp.miniJava.impl.MiniJavaImpl#getPackage <em>Package</em>}</li>
 *   <li>{@link edu.ustb.cmp.miniJava.impl.MiniJavaImpl#getImports <em>Imports</em>}</li>
 *   <li>{@link edu.ustb.cmp.miniJava.impl.MiniJavaImpl#getMainclass <em>Mainclass</em>}</li>
 *   <li>{@link edu.ustb.cmp.miniJava.impl.MiniJavaImpl#getClasses <em>Classes</em>}</li>
 * </ul>
 *
 * @generated
 */
public class MiniJavaImpl extends MinimalEObjectImpl.Container implements MiniJava
{
  /**
   * The cached value of the '{@link #getPackage() <em>Package</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPackage()
   * @generated
   * @ordered
   */
  protected PackageDecl package_;

  /**
   * The cached value of the '{@link #getImports() <em>Imports</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getImports()
   * @generated
   * @ordered
   */
  protected EList<ImportDecl> imports;

  /**
   * The cached value of the '{@link #getMainclass() <em>Mainclass</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMainclass()
   * @generated
   * @ordered
   */
  protected MainClassDecl mainclass;

  /**
   * The cached value of the '{@link #getClasses() <em>Classes</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getClasses()
   * @generated
   * @ordered
   */
  protected EList<ClassDecl> classes;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected MiniJavaImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return MiniJavaPackage.Literals.MINI_JAVA;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public PackageDecl getPackage()
  {
    return package_;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetPackage(PackageDecl newPackage, NotificationChain msgs)
  {
    PackageDecl oldPackage = package_;
    package_ = newPackage;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MiniJavaPackage.MINI_JAVA__PACKAGE, oldPackage, newPackage);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setPackage(PackageDecl newPackage)
  {
    if (newPackage != package_)
    {
      NotificationChain msgs = null;
      if (package_ != null)
        msgs = ((InternalEObject)package_).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MiniJavaPackage.MINI_JAVA__PACKAGE, null, msgs);
      if (newPackage != null)
        msgs = ((InternalEObject)newPackage).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MiniJavaPackage.MINI_JAVA__PACKAGE, null, msgs);
      msgs = basicSetPackage(newPackage, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MiniJavaPackage.MINI_JAVA__PACKAGE, newPackage, newPackage));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<ImportDecl> getImports()
  {
    if (imports == null)
    {
      imports = new EObjectContainmentEList<ImportDecl>(ImportDecl.class, this, MiniJavaPackage.MINI_JAVA__IMPORTS);
    }
    return imports;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MainClassDecl getMainclass()
  {
    return mainclass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetMainclass(MainClassDecl newMainclass, NotificationChain msgs)
  {
    MainClassDecl oldMainclass = mainclass;
    mainclass = newMainclass;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MiniJavaPackage.MINI_JAVA__MAINCLASS, oldMainclass, newMainclass);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setMainclass(MainClassDecl newMainclass)
  {
    if (newMainclass != mainclass)
    {
      NotificationChain msgs = null;
      if (mainclass != null)
        msgs = ((InternalEObject)mainclass).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MiniJavaPackage.MINI_JAVA__MAINCLASS, null, msgs);
      if (newMainclass != null)
        msgs = ((InternalEObject)newMainclass).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MiniJavaPackage.MINI_JAVA__MAINCLASS, null, msgs);
      msgs = basicSetMainclass(newMainclass, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MiniJavaPackage.MINI_JAVA__MAINCLASS, newMainclass, newMainclass));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<ClassDecl> getClasses()
  {
    if (classes == null)
    {
      classes = new EObjectContainmentEList<ClassDecl>(ClassDecl.class, this, MiniJavaPackage.MINI_JAVA__CLASSES);
    }
    return classes;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case MiniJavaPackage.MINI_JAVA__PACKAGE:
        return basicSetPackage(null, msgs);
      case MiniJavaPackage.MINI_JAVA__IMPORTS:
        return ((InternalEList<?>)getImports()).basicRemove(otherEnd, msgs);
      case MiniJavaPackage.MINI_JAVA__MAINCLASS:
        return basicSetMainclass(null, msgs);
      case MiniJavaPackage.MINI_JAVA__CLASSES:
        return ((InternalEList<?>)getClasses()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case MiniJavaPackage.MINI_JAVA__PACKAGE:
        return getPackage();
      case MiniJavaPackage.MINI_JAVA__IMPORTS:
        return getImports();
      case MiniJavaPackage.MINI_JAVA__MAINCLASS:
        return getMainclass();
      case MiniJavaPackage.MINI_JAVA__CLASSES:
        return getClasses();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case MiniJavaPackage.MINI_JAVA__PACKAGE:
        setPackage((PackageDecl)newValue);
        return;
      case MiniJavaPackage.MINI_JAVA__IMPORTS:
        getImports().clear();
        getImports().addAll((Collection<? extends ImportDecl>)newValue);
        return;
      case MiniJavaPackage.MINI_JAVA__MAINCLASS:
        setMainclass((MainClassDecl)newValue);
        return;
      case MiniJavaPackage.MINI_JAVA__CLASSES:
        getClasses().clear();
        getClasses().addAll((Collection<? extends ClassDecl>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case MiniJavaPackage.MINI_JAVA__PACKAGE:
        setPackage((PackageDecl)null);
        return;
      case MiniJavaPackage.MINI_JAVA__IMPORTS:
        getImports().clear();
        return;
      case MiniJavaPackage.MINI_JAVA__MAINCLASS:
        setMainclass((MainClassDecl)null);
        return;
      case MiniJavaPackage.MINI_JAVA__CLASSES:
        getClasses().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case MiniJavaPackage.MINI_JAVA__PACKAGE:
        return package_ != null;
      case MiniJavaPackage.MINI_JAVA__IMPORTS:
        return imports != null && !imports.isEmpty();
      case MiniJavaPackage.MINI_JAVA__MAINCLASS:
        return mainclass != null;
      case MiniJavaPackage.MINI_JAVA__CLASSES:
        return classes != null && !classes.isEmpty();
    }
    return super.eIsSet(featureID);
  }

} //MiniJavaImpl

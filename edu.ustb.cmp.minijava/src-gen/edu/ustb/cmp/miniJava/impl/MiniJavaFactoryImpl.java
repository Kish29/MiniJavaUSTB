/**
 * generated by Xtext 2.25.0
 */
package edu.ustb.cmp.miniJava.impl;

import edu.ustb.cmp.miniJava.*;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EDataType;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class MiniJavaFactoryImpl extends EFactoryImpl implements MiniJavaFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static MiniJavaFactory init()
  {
    try
    {
      MiniJavaFactory theMiniJavaFactory = (MiniJavaFactory)EPackage.Registry.INSTANCE.getEFactory(MiniJavaPackage.eNS_URI);
      if (theMiniJavaFactory != null)
      {
        return theMiniJavaFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new MiniJavaFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public MiniJavaFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case MiniJavaPackage.MINI_JAVA: return createMiniJava();
      case MiniJavaPackage.PACKAGE_DECL: return createPackageDecl();
      case MiniJavaPackage.IMPORT_DECL: return createImportDecl();
      case MiniJavaPackage.MAIN_CLASS_DECL: return createMainClassDecl();
      case MiniJavaPackage.CLASS_DECL: return createClassDecl();
      case MiniJavaPackage.VARIABLE_DECL: return createVariableDecl();
      case MiniJavaPackage.PARAMETER: return createParameter();
      case MiniJavaPackage.METHOD_DECL: return createMethodDecl();
      case MiniJavaPackage.MEMBER: return createMember();
      case MiniJavaPackage.STATEMENT: return createStatement();
      case MiniJavaPackage.LVALUE_EXP: return createLValueExp();
      case MiniJavaPackage.ASSIGNMENTS: return createAssignments();
      case MiniJavaPackage.IF_STATEMENTS: return createIfStatements();
      case MiniJavaPackage.ELSE_IF_STATEMENTS: return createElseIfStatements();
      case MiniJavaPackage.ELSE_STATEMENT: return createElseStatement();
      case MiniJavaPackage.WHILE_STATEMENTS: return createWhileStatements();
      case MiniJavaPackage.RETURN_STATEMENTS: return createReturnStatements();
      case MiniJavaPackage.CALC_EXP: return createCalcExp();
      case MiniJavaPackage.COMPARE_EXP: return createCompareExp();
      case MiniJavaPackage.BASIC_JUDGE: return createBasicJudge();
      case MiniJavaPackage.JUDGE_EXP: return createJudgeExp();
      case MiniJavaPackage.NEW_EXP: return createNewExp();
      case MiniJavaPackage.EXPRESSION: return createExpression();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object createFromString(EDataType eDataType, String initialValue)
  {
    switch (eDataType.getClassifierID())
    {
      case MiniJavaPackage.DOMAIN:
        return createDomainFromString(eDataType, initialValue);
      case MiniJavaPackage.EXTRA_ATTR:
        return createExtraAttrFromString(eDataType, initialValue);
      case MiniJavaPackage.BOOLEAN_EXP:
        return createBooleanExpFromString(eDataType, initialValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String convertToString(EDataType eDataType, Object instanceValue)
  {
    switch (eDataType.getClassifierID())
    {
      case MiniJavaPackage.DOMAIN:
        return convertDomainToString(eDataType, instanceValue);
      case MiniJavaPackage.EXTRA_ATTR:
        return convertExtraAttrToString(eDataType, instanceValue);
      case MiniJavaPackage.BOOLEAN_EXP:
        return convertBooleanExpToString(eDataType, instanceValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MiniJava createMiniJava()
  {
    MiniJavaImpl miniJava = new MiniJavaImpl();
    return miniJava;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public PackageDecl createPackageDecl()
  {
    PackageDeclImpl packageDecl = new PackageDeclImpl();
    return packageDecl;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ImportDecl createImportDecl()
  {
    ImportDeclImpl importDecl = new ImportDeclImpl();
    return importDecl;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MainClassDecl createMainClassDecl()
  {
    MainClassDeclImpl mainClassDecl = new MainClassDeclImpl();
    return mainClassDecl;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ClassDecl createClassDecl()
  {
    ClassDeclImpl classDecl = new ClassDeclImpl();
    return classDecl;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public VariableDecl createVariableDecl()
  {
    VariableDeclImpl variableDecl = new VariableDeclImpl();
    return variableDecl;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Parameter createParameter()
  {
    ParameterImpl parameter = new ParameterImpl();
    return parameter;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MethodDecl createMethodDecl()
  {
    MethodDeclImpl methodDecl = new MethodDeclImpl();
    return methodDecl;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Member createMember()
  {
    MemberImpl member = new MemberImpl();
    return member;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Statement createStatement()
  {
    StatementImpl statement = new StatementImpl();
    return statement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public LValueExp createLValueExp()
  {
    LValueExpImpl lValueExp = new LValueExpImpl();
    return lValueExp;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Assignments createAssignments()
  {
    AssignmentsImpl assignments = new AssignmentsImpl();
    return assignments;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public IfStatements createIfStatements()
  {
    IfStatementsImpl ifStatements = new IfStatementsImpl();
    return ifStatements;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ElseIfStatements createElseIfStatements()
  {
    ElseIfStatementsImpl elseIfStatements = new ElseIfStatementsImpl();
    return elseIfStatements;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ElseStatement createElseStatement()
  {
    ElseStatementImpl elseStatement = new ElseStatementImpl();
    return elseStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public WhileStatements createWhileStatements()
  {
    WhileStatementsImpl whileStatements = new WhileStatementsImpl();
    return whileStatements;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ReturnStatements createReturnStatements()
  {
    ReturnStatementsImpl returnStatements = new ReturnStatementsImpl();
    return returnStatements;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public CalcExp createCalcExp()
  {
    CalcExpImpl calcExp = new CalcExpImpl();
    return calcExp;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public CompareExp createCompareExp()
  {
    CompareExpImpl compareExp = new CompareExpImpl();
    return compareExp;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BasicJudge createBasicJudge()
  {
    BasicJudgeImpl basicJudge = new BasicJudgeImpl();
    return basicJudge;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public JudgeExp createJudgeExp()
  {
    JudgeExpImpl judgeExp = new JudgeExpImpl();
    return judgeExp;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NewExp createNewExp()
  {
    NewExpImpl newExp = new NewExpImpl();
    return newExp;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Expression createExpression()
  {
    ExpressionImpl expression = new ExpressionImpl();
    return expression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Domain createDomainFromString(EDataType eDataType, String initialValue)
  {
    Domain result = Domain.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertDomainToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ExtraAttr createExtraAttrFromString(EDataType eDataType, String initialValue)
  {
    ExtraAttr result = ExtraAttr.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertExtraAttrToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public BooleanExp createBooleanExpFromString(EDataType eDataType, String initialValue)
  {
    BooleanExp result = BooleanExp.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertBooleanExpToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MiniJavaPackage getMiniJavaPackage()
  {
    return (MiniJavaPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static MiniJavaPackage getPackage()
  {
    return MiniJavaPackage.eINSTANCE;
  }

} //MiniJavaFactoryImpl

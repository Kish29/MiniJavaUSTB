/**
 * generated by Xtext 2.25.0
 */
package edu.ustb.cmp.miniJava.impl;

import edu.ustb.cmp.miniJava.BasicJudge;
import edu.ustb.cmp.miniJava.JudgeExp;
import edu.ustb.cmp.miniJava.MiniJavaPackage;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Judge Exp</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link edu.ustb.cmp.miniJava.impl.JudgeExpImpl#getBj <em>Bj</em>}</li>
 * </ul>
 *
 * @generated
 */
public class JudgeExpImpl extends MinimalEObjectImpl.Container implements JudgeExp
{
  /**
   * The cached value of the '{@link #getBj() <em>Bj</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getBj()
   * @generated
   * @ordered
   */
  protected BasicJudge bj;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected JudgeExpImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return MiniJavaPackage.Literals.JUDGE_EXP;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BasicJudge getBj()
  {
    return bj;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetBj(BasicJudge newBj, NotificationChain msgs)
  {
    BasicJudge oldBj = bj;
    bj = newBj;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MiniJavaPackage.JUDGE_EXP__BJ, oldBj, newBj);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setBj(BasicJudge newBj)
  {
    if (newBj != bj)
    {
      NotificationChain msgs = null;
      if (bj != null)
        msgs = ((InternalEObject)bj).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MiniJavaPackage.JUDGE_EXP__BJ, null, msgs);
      if (newBj != null)
        msgs = ((InternalEObject)newBj).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MiniJavaPackage.JUDGE_EXP__BJ, null, msgs);
      msgs = basicSetBj(newBj, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MiniJavaPackage.JUDGE_EXP__BJ, newBj, newBj));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case MiniJavaPackage.JUDGE_EXP__BJ:
        return basicSetBj(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case MiniJavaPackage.JUDGE_EXP__BJ:
        return getBj();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case MiniJavaPackage.JUDGE_EXP__BJ:
        setBj((BasicJudge)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case MiniJavaPackage.JUDGE_EXP__BJ:
        setBj((BasicJudge)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case MiniJavaPackage.JUDGE_EXP__BJ:
        return bj != null;
    }
    return super.eIsSet(featureID);
  }

} //JudgeExpImpl

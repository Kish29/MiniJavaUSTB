/**
 * generated by Xtext 2.25.0
 */
package edu.ustb.cmp.miniJava.impl;

import edu.ustb.cmp.miniJava.CalcExp;
import edu.ustb.cmp.miniJava.ElseIfStatements;
import edu.ustb.cmp.miniJava.ElseStatement;
import edu.ustb.cmp.miniJava.Expression;
import edu.ustb.cmp.miniJava.JudgeExp;
import edu.ustb.cmp.miniJava.MiniJavaPackage;
import edu.ustb.cmp.miniJava.NewExp;
import edu.ustb.cmp.miniJava.Statement;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Expression</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link edu.ustb.cmp.miniJava.impl.ExpressionImpl#getStatements <em>Statements</em>}</li>
 *   <li>{@link edu.ustb.cmp.miniJava.impl.ExpressionImpl#getElseIf <em>Else If</em>}</li>
 *   <li>{@link edu.ustb.cmp.miniJava.impl.ExpressionImpl#getElse <em>Else</em>}</li>
 *   <li>{@link edu.ustb.cmp.miniJava.impl.ExpressionImpl#getConst <em>Const</em>}</li>
 *   <li>{@link edu.ustb.cmp.miniJava.impl.ExpressionImpl#getCe <em>Ce</em>}</li>
 *   <li>{@link edu.ustb.cmp.miniJava.impl.ExpressionImpl#getJe <em>Je</em>}</li>
 *   <li>{@link edu.ustb.cmp.miniJava.impl.ExpressionImpl#getNe <em>Ne</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ExpressionImpl extends IfStatementsImpl implements Expression
{
  /**
   * The cached value of the '{@link #getStatements() <em>Statements</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getStatements()
   * @generated
   * @ordered
   */
  protected EList<Statement> statements;

  /**
   * The cached value of the '{@link #getElseIf() <em>Else If</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getElseIf()
   * @generated
   * @ordered
   */
  protected EList<ElseIfStatements> elseIf;

  /**
   * The cached value of the '{@link #getElse() <em>Else</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getElse()
   * @generated
   * @ordered
   */
  protected EList<ElseStatement> else_;

  /**
   * The default value of the '{@link #getConst() <em>Const</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getConst()
   * @generated
   * @ordered
   */
  protected static final String CONST_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getConst() <em>Const</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getConst()
   * @generated
   * @ordered
   */
  protected String const_ = CONST_EDEFAULT;

  /**
   * The cached value of the '{@link #getCe() <em>Ce</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCe()
   * @generated
   * @ordered
   */
  protected CalcExp ce;

  /**
   * The cached value of the '{@link #getJe() <em>Je</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getJe()
   * @generated
   * @ordered
   */
  protected JudgeExp je;

  /**
   * The cached value of the '{@link #getNe() <em>Ne</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getNe()
   * @generated
   * @ordered
   */
  protected NewExp ne;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ExpressionImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return MiniJavaPackage.Literals.EXPRESSION;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Statement> getStatements()
  {
    if (statements == null)
    {
      statements = new EObjectContainmentEList<Statement>(Statement.class, this, MiniJavaPackage.EXPRESSION__STATEMENTS);
    }
    return statements;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<ElseIfStatements> getElseIf()
  {
    if (elseIf == null)
    {
      elseIf = new EObjectContainmentEList<ElseIfStatements>(ElseIfStatements.class, this, MiniJavaPackage.EXPRESSION__ELSE_IF);
    }
    return elseIf;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<ElseStatement> getElse()
  {
    if (else_ == null)
    {
      else_ = new EObjectContainmentEList<ElseStatement>(ElseStatement.class, this, MiniJavaPackage.EXPRESSION__ELSE);
    }
    return else_;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getConst()
  {
    return const_;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setConst(String newConst)
  {
    String oldConst = const_;
    const_ = newConst;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MiniJavaPackage.EXPRESSION__CONST, oldConst, const_));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public CalcExp getCe()
  {
    return ce;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetCe(CalcExp newCe, NotificationChain msgs)
  {
    CalcExp oldCe = ce;
    ce = newCe;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MiniJavaPackage.EXPRESSION__CE, oldCe, newCe);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setCe(CalcExp newCe)
  {
    if (newCe != ce)
    {
      NotificationChain msgs = null;
      if (ce != null)
        msgs = ((InternalEObject)ce).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MiniJavaPackage.EXPRESSION__CE, null, msgs);
      if (newCe != null)
        msgs = ((InternalEObject)newCe).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MiniJavaPackage.EXPRESSION__CE, null, msgs);
      msgs = basicSetCe(newCe, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MiniJavaPackage.EXPRESSION__CE, newCe, newCe));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public JudgeExp getJe()
  {
    return je;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetJe(JudgeExp newJe, NotificationChain msgs)
  {
    JudgeExp oldJe = je;
    je = newJe;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MiniJavaPackage.EXPRESSION__JE, oldJe, newJe);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setJe(JudgeExp newJe)
  {
    if (newJe != je)
    {
      NotificationChain msgs = null;
      if (je != null)
        msgs = ((InternalEObject)je).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MiniJavaPackage.EXPRESSION__JE, null, msgs);
      if (newJe != null)
        msgs = ((InternalEObject)newJe).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MiniJavaPackage.EXPRESSION__JE, null, msgs);
      msgs = basicSetJe(newJe, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MiniJavaPackage.EXPRESSION__JE, newJe, newJe));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NewExp getNe()
  {
    return ne;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetNe(NewExp newNe, NotificationChain msgs)
  {
    NewExp oldNe = ne;
    ne = newNe;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MiniJavaPackage.EXPRESSION__NE, oldNe, newNe);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setNe(NewExp newNe)
  {
    if (newNe != ne)
    {
      NotificationChain msgs = null;
      if (ne != null)
        msgs = ((InternalEObject)ne).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MiniJavaPackage.EXPRESSION__NE, null, msgs);
      if (newNe != null)
        msgs = ((InternalEObject)newNe).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MiniJavaPackage.EXPRESSION__NE, null, msgs);
      msgs = basicSetNe(newNe, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MiniJavaPackage.EXPRESSION__NE, newNe, newNe));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case MiniJavaPackage.EXPRESSION__STATEMENTS:
        return ((InternalEList<?>)getStatements()).basicRemove(otherEnd, msgs);
      case MiniJavaPackage.EXPRESSION__ELSE_IF:
        return ((InternalEList<?>)getElseIf()).basicRemove(otherEnd, msgs);
      case MiniJavaPackage.EXPRESSION__ELSE:
        return ((InternalEList<?>)getElse()).basicRemove(otherEnd, msgs);
      case MiniJavaPackage.EXPRESSION__CE:
        return basicSetCe(null, msgs);
      case MiniJavaPackage.EXPRESSION__JE:
        return basicSetJe(null, msgs);
      case MiniJavaPackage.EXPRESSION__NE:
        return basicSetNe(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case MiniJavaPackage.EXPRESSION__STATEMENTS:
        return getStatements();
      case MiniJavaPackage.EXPRESSION__ELSE_IF:
        return getElseIf();
      case MiniJavaPackage.EXPRESSION__ELSE:
        return getElse();
      case MiniJavaPackage.EXPRESSION__CONST:
        return getConst();
      case MiniJavaPackage.EXPRESSION__CE:
        return getCe();
      case MiniJavaPackage.EXPRESSION__JE:
        return getJe();
      case MiniJavaPackage.EXPRESSION__NE:
        return getNe();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case MiniJavaPackage.EXPRESSION__STATEMENTS:
        getStatements().clear();
        getStatements().addAll((Collection<? extends Statement>)newValue);
        return;
      case MiniJavaPackage.EXPRESSION__ELSE_IF:
        getElseIf().clear();
        getElseIf().addAll((Collection<? extends ElseIfStatements>)newValue);
        return;
      case MiniJavaPackage.EXPRESSION__ELSE:
        getElse().clear();
        getElse().addAll((Collection<? extends ElseStatement>)newValue);
        return;
      case MiniJavaPackage.EXPRESSION__CONST:
        setConst((String)newValue);
        return;
      case MiniJavaPackage.EXPRESSION__CE:
        setCe((CalcExp)newValue);
        return;
      case MiniJavaPackage.EXPRESSION__JE:
        setJe((JudgeExp)newValue);
        return;
      case MiniJavaPackage.EXPRESSION__NE:
        setNe((NewExp)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case MiniJavaPackage.EXPRESSION__STATEMENTS:
        getStatements().clear();
        return;
      case MiniJavaPackage.EXPRESSION__ELSE_IF:
        getElseIf().clear();
        return;
      case MiniJavaPackage.EXPRESSION__ELSE:
        getElse().clear();
        return;
      case MiniJavaPackage.EXPRESSION__CONST:
        setConst(CONST_EDEFAULT);
        return;
      case MiniJavaPackage.EXPRESSION__CE:
        setCe((CalcExp)null);
        return;
      case MiniJavaPackage.EXPRESSION__JE:
        setJe((JudgeExp)null);
        return;
      case MiniJavaPackage.EXPRESSION__NE:
        setNe((NewExp)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case MiniJavaPackage.EXPRESSION__STATEMENTS:
        return statements != null && !statements.isEmpty();
      case MiniJavaPackage.EXPRESSION__ELSE_IF:
        return elseIf != null && !elseIf.isEmpty();
      case MiniJavaPackage.EXPRESSION__ELSE:
        return else_ != null && !else_.isEmpty();
      case MiniJavaPackage.EXPRESSION__CONST:
        return CONST_EDEFAULT == null ? const_ != null : !CONST_EDEFAULT.equals(const_);
      case MiniJavaPackage.EXPRESSION__CE:
        return ce != null;
      case MiniJavaPackage.EXPRESSION__JE:
        return je != null;
      case MiniJavaPackage.EXPRESSION__NE:
        return ne != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (const: ");
    result.append(const_);
    result.append(')');
    return result.toString();
  }

} //ExpressionImpl

/*
 * generated by Xtext 2.25.0
 */
package edu.ustb.cmp.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import edu.ustb.cmp.ide.contentassist.antlr.internal.InternalMiniJavaParser;
import edu.ustb.cmp.services.MiniJavaGrammarAccess;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class MiniJavaParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(MiniJavaGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, MiniJavaGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getConstantValueAccess().getAlternatives(), "rule__ConstantValue__Alternatives");
			builder.put(grammarAccess.getBasicDataTypeAccess().getAlternatives(), "rule__BasicDataType__Alternatives");
			builder.put(grammarAccess.getDataTypeAccess().getAlternatives(), "rule__DataType__Alternatives");
			builder.put(grammarAccess.getReturnTypeAccess().getAlternatives(), "rule__ReturnType__Alternatives");
			builder.put(grammarAccess.getMemberAccess().getAlternatives(), "rule__Member__Alternatives");
			builder.put(grammarAccess.getStatementAccess().getAlternatives(), "rule__Statement__Alternatives");
			builder.put(grammarAccess.getLValueExpAccess().getAlternatives(), "rule__LValueExp__Alternatives");
			builder.put(grammarAccess.getOperatorAccess().getAlternatives(), "rule__Operator__Alternatives");
			builder.put(grammarAccess.getCalcExpAccess().getAlternatives(), "rule__CalcExp__Alternatives");
			builder.put(grammarAccess.getBasicJudgeAccess().getAlternatives(), "rule__BasicJudge__Alternatives");
			builder.put(grammarAccess.getExpressionAccess().getAlternatives(), "rule__Expression__Alternatives");
			builder.put(grammarAccess.getDomainAccess().getAlternatives(), "rule__Domain__Alternatives");
			builder.put(grammarAccess.getExtraAttrAccess().getAlternatives(), "rule__ExtraAttr__Alternatives");
			builder.put(grammarAccess.getBooleanExpAccess().getAlternatives(), "rule__BooleanExp__Alternatives");
			builder.put(grammarAccess.getMiniJavaAccess().getGroup(), "rule__MiniJava__Group__0");
			builder.put(grammarAccess.getPackageDeclAccess().getGroup(), "rule__PackageDecl__Group__0");
			builder.put(grammarAccess.getImportDeclAccess().getGroup(), "rule__ImportDecl__Group__0");
			builder.put(grammarAccess.getMainClassDeclAccess().getGroup(), "rule__MainClassDecl__Group__0");
			builder.put(grammarAccess.getClassDeclAccess().getGroup(), "rule__ClassDecl__Group__0");
			builder.put(grammarAccess.getClassDeclAccess().getGroup_2(), "rule__ClassDecl__Group_2__0");
			builder.put(grammarAccess.getClassDeclAccess().getGroup_3(), "rule__ClassDecl__Group_3__0");
			builder.put(grammarAccess.getQualifiedNameAccess().getGroup(), "rule__QualifiedName__Group__0");
			builder.put(grammarAccess.getQualifiedNameAccess().getGroup_1(), "rule__QualifiedName__Group_1__0");
			builder.put(grammarAccess.getDoubleLiteralAccess().getGroup(), "rule__DoubleLiteral__Group__0");
			builder.put(grammarAccess.getDataTypeAccess().getGroup_2(), "rule__DataType__Group_2__0");
			builder.put(grammarAccess.getVariableDeclAccess().getGroup(), "rule__VariableDecl__Group__0");
			builder.put(grammarAccess.getParameterAccess().getGroup(), "rule__Parameter__Group__0");
			builder.put(grammarAccess.getMethodDeclAccess().getGroup(), "rule__MethodDecl__Group__0");
			builder.put(grammarAccess.getLValueExpAccess().getGroup_1(), "rule__LValueExp__Group_1__0");
			builder.put(grammarAccess.getLValueExpAccess().getGroup_2(), "rule__LValueExp__Group_2__0");
			builder.put(grammarAccess.getAssignmentsAccess().getGroup(), "rule__Assignments__Group__0");
			builder.put(grammarAccess.getIfStatementsAccess().getGroup(), "rule__IfStatements__Group__0");
			builder.put(grammarAccess.getElseIfStatementsAccess().getGroup(), "rule__ElseIfStatements__Group__0");
			builder.put(grammarAccess.getElseStatementAccess().getGroup(), "rule__ElseStatement__Group__0");
			builder.put(grammarAccess.getWhileStatementsAccess().getGroup(), "rule__WhileStatements__Group__0");
			builder.put(grammarAccess.getReturnStatementsAccess().getGroup(), "rule__ReturnStatements__Group__0");
			builder.put(grammarAccess.getCalcExpAccess().getGroup_1(), "rule__CalcExp__Group_1__0");
			builder.put(grammarAccess.getCompareExpAccess().getGroup(), "rule__CompareExp__Group__0");
			builder.put(grammarAccess.getJudgeExpAccess().getGroup(), "rule__JudgeExp__Group__0");
			builder.put(grammarAccess.getNewExpAccess().getGroup(), "rule__NewExp__Group__0");
			builder.put(grammarAccess.getMiniJavaAccess().getPackageAssignment_0(), "rule__MiniJava__PackageAssignment_0");
			builder.put(grammarAccess.getMiniJavaAccess().getImportsAssignment_1(), "rule__MiniJava__ImportsAssignment_1");
			builder.put(grammarAccess.getMiniJavaAccess().getMainclassAssignment_2(), "rule__MiniJava__MainclassAssignment_2");
			builder.put(grammarAccess.getMiniJavaAccess().getClassesAssignment_3(), "rule__MiniJava__ClassesAssignment_3");
			builder.put(grammarAccess.getPackageDeclAccess().getNameAssignment_1(), "rule__PackageDecl__NameAssignment_1");
			builder.put(grammarAccess.getImportDeclAccess().getAnchorAssignment_1(), "rule__ImportDecl__AnchorAssignment_1");
			builder.put(grammarAccess.getMainClassDeclAccess().getNameAssignment_12(), "rule__MainClassDecl__NameAssignment_12");
			builder.put(grammarAccess.getMainClassDeclAccess().getStatementsAssignment_15(), "rule__MainClassDecl__StatementsAssignment_15");
			builder.put(grammarAccess.getClassDeclAccess().getNameAssignment_1(), "rule__ClassDecl__NameAssignment_1");
			builder.put(grammarAccess.getClassDeclAccess().getSuperClassAssignment_2_1(), "rule__ClassDecl__SuperClassAssignment_2_1");
			builder.put(grammarAccess.getClassDeclAccess().getImplementzAssignment_3_1(), "rule__ClassDecl__ImplementzAssignment_3_1");
			builder.put(grammarAccess.getClassDeclAccess().getMembersAssignment_5(), "rule__ClassDecl__MembersAssignment_5");
			builder.put(grammarAccess.getVariableDeclAccess().getVarTypeAssignment_0(), "rule__VariableDecl__VarTypeAssignment_0");
			builder.put(grammarAccess.getVariableDeclAccess().getNameAssignment_1(), "rule__VariableDecl__NameAssignment_1");
			builder.put(grammarAccess.getVariableDeclAccess().getValueAssignment_3(), "rule__VariableDecl__ValueAssignment_3");
			builder.put(grammarAccess.getParameterAccess().getTypeAssignment_0(), "rule__Parameter__TypeAssignment_0");
			builder.put(grammarAccess.getParameterAccess().getNameAssignment_1(), "rule__Parameter__NameAssignment_1");
			builder.put(grammarAccess.getMethodDeclAccess().getDomainAssignment_0(), "rule__MethodDecl__DomainAssignment_0");
			builder.put(grammarAccess.getMethodDeclAccess().getExtraAssignment_1(), "rule__MethodDecl__ExtraAssignment_1");
			builder.put(grammarAccess.getMethodDeclAccess().getRetTypeAssignment_2(), "rule__MethodDecl__RetTypeAssignment_2");
			builder.put(grammarAccess.getMethodDeclAccess().getNameAssignment_3(), "rule__MethodDecl__NameAssignment_3");
			builder.put(grammarAccess.getMethodDeclAccess().getParamsAssignment_5(), "rule__MethodDecl__ParamsAssignment_5");
			builder.put(grammarAccess.getMethodDeclAccess().getStatementsAssignment_8(), "rule__MethodDecl__StatementsAssignment_8");
			builder.put(grammarAccess.getStatementAccess().getVarDefAssignment_0(), "rule__Statement__VarDefAssignment_0");
			builder.put(grammarAccess.getStatementAccess().getAssignAssignment_1(), "rule__Statement__AssignAssignment_1");
			builder.put(grammarAccess.getStatementAccess().getIfStatAssignment_2(), "rule__Statement__IfStatAssignment_2");
			builder.put(grammarAccess.getStatementAccess().getWhileStatAssignment_3(), "rule__Statement__WhileStatAssignment_3");
			builder.put(grammarAccess.getStatementAccess().getRetStatAssignment_4(), "rule__Statement__RetStatAssignment_4");
			builder.put(grammarAccess.getLValueExpAccess().getIdAssignment_0(), "rule__LValueExp__IdAssignment_0");
			builder.put(grammarAccess.getLValueExpAccess().getExpAssignment_1_0(), "rule__LValueExp__ExpAssignment_1_0");
			builder.put(grammarAccess.getLValueExpAccess().getIdAssignment_1_2(), "rule__LValueExp__IdAssignment_1_2");
			builder.put(grammarAccess.getLValueExpAccess().getExpAssignment_2_0(), "rule__LValueExp__ExpAssignment_2_0");
			builder.put(grammarAccess.getLValueExpAccess().getIndexAssignment_2_2(), "rule__LValueExp__IndexAssignment_2_2");
			builder.put(grammarAccess.getAssignmentsAccess().getLeftValueAssignment_0(), "rule__Assignments__LeftValueAssignment_0");
			builder.put(grammarAccess.getAssignmentsAccess().getExpressionAssignment_2(), "rule__Assignments__ExpressionAssignment_2");
			builder.put(grammarAccess.getIfStatementsAccess().getStatementsAssignment_5(), "rule__IfStatements__StatementsAssignment_5");
			builder.put(grammarAccess.getIfStatementsAccess().getElseIfAssignment_7(), "rule__IfStatements__ElseIfAssignment_7");
			builder.put(grammarAccess.getIfStatementsAccess().getElseAssignment_8(), "rule__IfStatements__ElseAssignment_8");
			builder.put(grammarAccess.getElseIfStatementsAccess().getStatementsAssignment_6(), "rule__ElseIfStatements__StatementsAssignment_6");
			builder.put(grammarAccess.getElseStatementAccess().getStatementsAssignment_3(), "rule__ElseStatement__StatementsAssignment_3");
			builder.put(grammarAccess.getWhileStatementsAccess().getStatementsAssignment_5(), "rule__WhileStatements__StatementsAssignment_5");
			builder.put(grammarAccess.getReturnStatementsAccess().getExpAssignment_1(), "rule__ReturnStatements__ExpAssignment_1");
			builder.put(grammarAccess.getCalcExpAccess().getLeftNameAssignment_0(), "rule__CalcExp__LeftNameAssignment_0");
			builder.put(grammarAccess.getCalcExpAccess().getLeftNumAssignment_1_0(), "rule__CalcExp__LeftNumAssignment_1_0");
			builder.put(grammarAccess.getCalcExpAccess().getOpAssignment_1_1(), "rule__CalcExp__OpAssignment_1_1");
			builder.put(grammarAccess.getCalcExpAccess().getRightNameAssignment_1_2(), "rule__CalcExp__RightNameAssignment_1_2");
			builder.put(grammarAccess.getCalcExpAccess().getRightNumAssignment_2(), "rule__CalcExp__RightNumAssignment_2");
			builder.put(grammarAccess.getCompareExpAccess().getIdAssignment_0(), "rule__CompareExp__IdAssignment_0");
			builder.put(grammarAccess.getCompareExpAccess().getOpAssignment_1(), "rule__CompareExp__OpAssignment_1");
			builder.put(grammarAccess.getCompareExpAccess().getOther1Assignment_2(), "rule__CompareExp__Other1Assignment_2");
			builder.put(grammarAccess.getCompareExpAccess().getOther2Assignment_3(), "rule__CompareExp__Other2Assignment_3");
			builder.put(grammarAccess.getBasicJudgeAccess().getBEAssignment_0(), "rule__BasicJudge__BEAssignment_0");
			builder.put(grammarAccess.getBasicJudgeAccess().getCmpAssignment_1(), "rule__BasicJudge__CmpAssignment_1");
			builder.put(grammarAccess.getJudgeExpAccess().getBjAssignment_2(), "rule__JudgeExp__BjAssignment_2");
			builder.put(grammarAccess.getNewExpAccess().getNameAssignment_1(), "rule__NewExp__NameAssignment_1");
			builder.put(grammarAccess.getNewExpAccess().getParamsAssignment_3(), "rule__NewExp__ParamsAssignment_3");
			builder.put(grammarAccess.getExpressionAccess().getConstAssignment_0(), "rule__Expression__ConstAssignment_0");
			builder.put(grammarAccess.getExpressionAccess().getCeAssignment_1(), "rule__Expression__CeAssignment_1");
			builder.put(grammarAccess.getExpressionAccess().getJeAssignment_2(), "rule__Expression__JeAssignment_2");
			builder.put(grammarAccess.getExpressionAccess().getNeAssignment_3(), "rule__Expression__NeAssignment_3");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private MiniJavaGrammarAccess grammarAccess;

	@Override
	protected InternalMiniJavaParser createParser() {
		InternalMiniJavaParser result = new InternalMiniJavaParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public MiniJavaGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(MiniJavaGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
